{"version":3,"file":"index.js","mappings":"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","sources":["webpack://turtltechwebsite/./src/controllers/adminController.js","webpack://turtltechwebsite/./src/controllers/blogController.js","webpack://turtltechwebsite/./src/controllers/certificateController.js","webpack://turtltechwebsite/./src/controllers/contactUsController.js","webpack://turtltechwebsite/./src/controllers/eventController.js","webpack://turtltechwebsite/./src/controllers/firebaseImageController.js","webpack://turtltechwebsite/./src/controllers/imageController.js","webpack://turtltechwebsite/./src/controllers/likesController.js","webpack://turtltechwebsite/./src/controllers/pageImageController.js","webpack://turtltechwebsite/./src/controllers/paymentGatewayController.js","webpack://turtltechwebsite/./src/controllers/portfolioController.js","webpack://turtltechwebsite/./src/controllers/serviceCategoryController.js","webpack://turtltechwebsite/./src/controllers/serviceController.js","webpack://turtltechwebsite/./src/controllers/testimonialController.js","webpack://turtltechwebsite/./src/controllers/turtlFAQController.js","webpack://turtltechwebsite/./src/controllers/turtlInfoController.js","webpack://turtltechwebsite/./src/controllers/turtlSEOController.js","webpack://turtltechwebsite/./src/controllers/urlCountingAPI.js","webpack://turtltechwebsite/./src/controllers/userController.js","webpack://turtltechwebsite/./src/controllers/visitorController.js","webpack://turtltechwebsite/./src/middlewares/ImageUpload.js","webpack://turtltechwebsite/./src/middlewares/auth.js","webpack://turtltechwebsite/./src/middlewares/config.js","webpack://turtltechwebsite/./src/middlewares/firebase.js","webpack://turtltechwebsite/./src/models/adminModel.js","webpack://turtltechwebsite/./src/models/blogModel.js","webpack://turtltechwebsite/./src/models/certificateModel.js","webpack://turtltechwebsite/./src/models/eventModel.js","webpack://turtltechwebsite/./src/models/imageModel.js","webpack://turtltechwebsite/./src/models/likesModel.js","webpack://turtltechwebsite/./src/models/pageImagesModel.js","webpack://turtltechwebsite/./src/models/portfolioModel.js","webpack://turtltechwebsite/./src/models/serviceCategoryModel.js","webpack://turtltechwebsite/./src/models/serviceModel.js","webpack://turtltechwebsite/./src/models/testimonialModel.js","webpack://turtltechwebsite/./src/models/turtlFAQModel.js","webpack://turtltechwebsite/./src/models/turtlInfoModel.js","webpack://turtltechwebsite/./src/models/turtlSEOModel.js","webpack://turtltechwebsite/./src/models/userModel.js","webpack://turtltechwebsite/./src/models/visitorModel.js","webpack://turtltechwebsite/./src/routes/routes.js","webpack://turtltechwebsite/./src/utils/utils.js","webpack://turtltechwebsite/external commonjs \"axios\"","webpack://turtltechwebsite/external commonjs \"bcrypt\"","webpack://turtltechwebsite/external commonjs \"body-parser\"","webpack://turtltechwebsite/external commonjs \"cheerio\"","webpack://turtltechwebsite/external commonjs \"cors\"","webpack://turtltechwebsite/external commonjs \"dotenv\"","webpack://turtltechwebsite/external commonjs \"express\"","webpack://turtltechwebsite/external commonjs \"express-fileupload\"","webpack://turtltechwebsite/external commonjs \"firebase/app\"","webpack://turtltechwebsite/external commonjs \"firebase/storage\"","webpack://turtltechwebsite/external commonjs \"fs\"","webpack://turtltechwebsite/external commonjs \"helmet\"","webpack://turtltechwebsite/external commonjs \"jsonwebtoken\"","webpack://turtltechwebsite/external commonjs \"mongoose\"","webpack://turtltechwebsite/external commonjs \"nodemailer\"","webpack://turtltechwebsite/external commonjs \"passport\"","webpack://turtltechwebsite/external commonjs \"paypal-rest-sdk\"","webpack://turtltechwebsite/external commonjs \"slugify\"","webpack://turtltechwebsite/external commonjs \"uuid\"","webpack://turtltechwebsite/external node-commonjs \"path\"","webpack://turtltechwebsite/webpack/bootstrap","webpack://turtltechwebsite/./index.js"],"sourcesContent":["const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { tokenSecretKey } = require('../middlewares/config');\r\n// const QRCode = require('qrcode');\r\nconst {\r\n  isValidRequestBody,\r\n  isValid,\r\n  isvalidEmail,\r\n  isValidPassword,\r\n} = require(\"../utils/utils\");\r\n\r\n\r\n// CREATE ADMIN\r\nconst createAdmin = async function (req, res) {\r\n  try {\r\n    let data = req.body;\r\n    if (!isValidRequestBody(data)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter data in body\" });\r\n    }\r\n\r\n    let { name, email, password } = data;\r\n    \r\n    if (!isValid(name)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Provide the proper name \" });\r\n    }\r\n\r\n    let checkAdmin = await adminModel.findOne({ name: name });\r\n\r\n    if (checkAdmin)\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Admin is already created\" });\r\n\r\n    if (!isValid(email)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Email-ID is required\" });\r\n    }\r\n\r\n    if (!isvalidEmail(email))\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid Email id. Ex: example12@gmail.com\",\r\n      });\r\n   \r\n    let checkEmail = await adminModel.findOne({ email: email });\r\n\r\n    if (checkEmail)\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"This email is already exists\" });\r\n\r\n    if (!isValid(password)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"password is required\" });\r\n    }\r\n    \r\n    if (password.length < 8 || password.length > 15)\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Password must in between 12 to 25 characters\",\r\n      });\r\n\r\n    if (!isValidPassword(password))\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: `Password must include atleast one special character[@$!%?&], one uppercase, one \r\n        lowercase, one number and should be mimimum 8 to 15 characters long for Example:Password@123`,\r\n      });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    password = hashedPassword;\r\n\r\n    const adminData = {\r\n      name,\r\n      email,\r\n      password\r\n    };\r\n\r\n    adminData.role = \"ADMIN\";\r\n\r\n    let createData = await adminModel.create(adminData);\r\n\r\n    // businessData.adminId = createData._id;\r\n\r\n    // let createBusiness = await businessInfoModel.create(businessData);\r\n\r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"Admin created successfully\",\r\n      data: createData,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// Login Admin\r\nconst loginAdmin = async function (req, res) {\r\n  try {\r\n    let body = req.body;\r\n    const { email, password } = body;\r\n\r\n    if (!isValidRequestBody(body))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Body Should not be empty\" });\r\n\r\n    if (!isValid(email))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"email should not be empty\" });\r\n\r\n    if (!isvalidEmail(email))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter valid email\" });\r\n\r\n    if (!isValid(password))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Password should not be empty\" });\r\n\r\n    let admin = await adminModel.findOne({ email: email });\r\n\r\n    if (!admin)\r\n      return res\r\n        .status(401)\r\n        .send({ status: false, message: \"Please use valid credentials\" });\r\n\r\n    bcrypt.compare(password, admin.password, function (err, result) {\r\n      hasAccess(result);\r\n    });\r\n\r\n    function hasAccess(result) {\r\n      if (result) {\r\n        // insert login code here\r\n        //console.log(\"Access Granted!\");\r\n        let token = jwt.sign(\r\n          {\r\n            adminId: admin._id.toString(),\r\n            Assignment: \"turtltechbackend\",\r\n            Author: \"nirajkumar\",\r\n          },\r\n          tokenSecretKey,\r\n          { expiresIn: \"24h\" }\r\n        );\r\n        // res.setHeader(\"x-api-key\", token);\r\n       \r\n        res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n        return res.status(201).send({\r\n          status: true,\r\n          message: \"Successfully loggedin\",\r\n          adminId: admin._id,\r\n          data: token,\r\n        });\r\n      } else {\r\n        // insert access denied code here\r\n        // console.log(\"Access Denied!\");\r\n        return res.status(401).send({\r\n          status: false,\r\n          message: \"login denied \",\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ status: false, message: err.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { createAdmin, loginAdmin };","const blogModel = require(\"../models/blogModel\");\nconst adminModel = require(\"../models/adminModel\");\nconst userModel = require('../models/userModel');\nconst likesModel = require('../models/likesModel');\nconst fs = require('fs');\nconst path = require('path');\n\n\n\n\nconst { upload, imageMV } = require(\"../middlewares/ImageUpload\");\n\n// const { getUserId, getUser } = require(\"../middlewares/auth\");\n\nconst {\n  isValid,\n  isValidObjectId,\n  isValidRequestBody,\n  isValidImg\n} = require(\"../utils/utils\");\n\n// CREATE BLOG\nconst createBlog = async (req, res) => {\n  try {\n\n    let data = req.body;\n    \n    let {\n      blogTitle,\n      tags,\n      description,\n      sections,\n      coverImgUrl,\n      coverImgAlt\n    } = data;\n\n    // console.log('section', sections);\n    // console.log('Hello example', JSON.parse(sections));\n\n    if (!isValid(blogTitle)) {\n      return res\n        .status(400)\n        .send({ status: false, message: \"Blog title is required\" });\n    }\n\n    if (!isValid(description)) {\n      return res\n        .status(400)\n        .send({ status: false, message: \"Description is required\" });\n    }\n\n    let blogData = {\n      blogTitle,\n      tags,\n      description\n    };\n\n    blogData.tags = tags.split('#').filter(el => {\n      return el.length > 0 && el.trim();\n    });\n    // console.log('Hello example', tags);\n\n    let key = Math.random().toString(36).slice(2,8);\n\n    blogData.blogUID = key;\n    blogData.isPublished = true;\n    blogData.publishedAt = new Date();\n   \n    let secArr = [];\n    for (let sec of JSON.parse(sections)) {\n      secArr.push({content: sec});\n    }\n\n    // for (let i in file) {\n    //   // secArr[parseInt(i.split('_')[1])].img = 'hello'\n    //   // parseInt(i.split('_')[1]) >= 0 ? console.log(\"idx\", parseInt(i.split('_')[1])) : '';\n    //   parseInt(i.split('_')[1]) >= 0 ? secArr[parseInt(i.split('_')[1])].imgUrl = await imageMV(file[i], 'blogImages') : '';\n    // }\n    // console.log('hello', secArr);\n    // blogData.coverImg = await imageMV(file.coverImg, 'blogImages');\n    // blogData.coverImg.imageUrl = await imageMV(file.coverImg, 'blogImages');\n    // console.log('Hello example', req.body);\n\n    let abc = {\n      imageUrl: coverImgUrl,\n      altText: coverImgAlt ? coverImgAlt : 'turtltech.com'\n    }\n    blogData.coverImg = abc;\n\n    blogData.sections = secArr;\n\n     /*\n      pageDescription,\n      pageKeywords,\n      pageUrl,\n      imageUrl,\n      siteName,\n      altImageText,\n      imageHight,\n      imageWidth\n    */\n\n    blogData.seoData = JSON.parse(data.seoData);\n    \n    let blog = await blogModel.create(blogData);\n    \n    return res.status(201).send({\n      status: true,\n      message: \"Blog created successfully\",\n      data: blog,\n    });\n  } catch (error) {\n    return res.status(500).send({ status: false, message: error.message });\n  }\n};\n\n// GET ALL BLOGS\nconst getBlogs = async (req, res) => {\n  try {\n    let blogs = await blogModel.find({ isPublished: true }).sort({ createdAt: 'desc' });\n\n    if (!blogs) {\n      return res.status(404).send({ status: false, message: \"No blog found\" });\n    }\n\n    return res.status(200).send({ status: true, blogs: blogs });\n  } catch (error) {\n    return res.status(500).send({ status: false, message: error.message });\n  }\n};\n\n// GET BLOG BY BLOG ID\nconst getBlogById = async (req, res) => {\n  try {\n    let blogId = req.params.blogId;\n\n    if (!isValidObjectId(blogId)) {\n      return res.status(400).send({\n        status: false,\n        message: \"Invalid blog id, please enter a valid blog id in params\",\n      });\n    }\n\n    let blog = await blogModel.findById(blogId);\n\n    if (!blog) {\n      return res.status(404).send({ status: false, message: \"Blog not found\" });\n    }\n\n    return res.status(200).send({ status: true, blog: blog });\n  } catch (error) {\n    return res.status(500).send({ status: false, message: error.message });\n  }\n};\n\n// GET BLOG BY BLOG SLUG\nconst getBlogByParams = async (req, res) => {\n  try {\n    let slug = req.params.slug;\n\n    let blog = await blogModel.findOne({slug: slug});\n    \n    if (!blog) {\n      return res.status(404).send({ status: false, message: \"Blog not found\" });\n    }\n\n    blog.blogViews = blog.blogViews + 1;\n    await blog.save();\n\n    return res.status(200).send({ status: true, blog: blog });\n  } catch (error) {\n    return res.status(500).send({ status: false, message: error.message });\n  }\n};\n\n// UPDATE BLOG BY BLOG ID\nconst updateBlogById = async (req, res) => {\n  try {\n    let blogId = req.params.blogId;\n\n    if (!isValidObjectId(blogId)) {\n      return res.status(400).send({\n        status: false,\n        message: \"Invalid blog id, please enter a valid blog id in params\",\n      });\n    }\n\n    let blog = await blogModel.findById(blogId);\n\n    if (!blog) {\n      return res.status(404).send({ status: false, message: \"Blog not found\" });\n    }\n\n    let body = req.body;\n    let files = req.files;\n    \n    if (\"blogTitle\" in body && body.blogTitle !== \"\") {\n      blog.blogTitle = body.blogTitle;\n    }\n\n    if (\"description\" in body && body.description !== \"\") {\n      blog.description = body.description;\n    }\n\n    if (\"sections\" in body && body.sections !== \"\") {\n      blog.sections = body.sections;\n    }\n\n    if (files && files.length > 0) {\n      if (!isValidImg(files[0].mimetype)) {\n        return res.status(400).send({\n          status: false,\n          message: \"Image Should be of JPEG/ JPG/ PNG\",\n        });\n      }\n      let updatedImgUrl = await imageMV(files.coverImg, 'blogImages');\n      data.coverImg = updatedImgUrl;\n    }\n\n    if (\"quote\" in body && body.quote !== \"\") {\n      blog.quote = body.quote;\n    }\n\n    if (\"blogFooter\" in body && body.blogFooter !== \"\") {\n      blog.blogFooter = body.blogFooter;\n    }\n\n    if (\"tags\" in body && body.blogImage !== \"\") {\n      blog.tags = body.tags;\n    }\n\n    await blog.save();\n\n    return res.status(200).send({\n      status: true,\n      message: \"Blog updated successfully\",\n      updateData: blog,\n    });\n  } catch (error) {\n    return res.status(500).send({ status: false, message: error.message });\n  }\n};\n\n// DELETE BLOG BY BLOG ID\nconst deleteBlogById = async (req, res) => {\n  try {\n    let blogId = req.params.blogId;\n\n    if (!isValidObjectId(blogId)) {\n      return res.status(400).send({\n        status: false,\n        message: \"Invalid blog id, please enter a valid blog id\",\n      });\n    }\n\n    let blog = await blogModel.findById(blogId);\n\n    if (!blog) {\n      return res.status(404).send({ status: false, message: 'No blog found with this blog id'})\n    }\n\n    // console.log( 'coverImg', blog.sections );\n\n    // const directory = 'public/uploads/blogImages';\n\n    // fs.readdir(directory, (err, files) => {\n    //   if(err) {\n    //     console.log(err);\n    //   }\n\n    //   let arr = [];\n\n    //   for (let i=0; i<blog.sections.length; i++) {\n    //     let str2 = blog.sections[i].imgUrl;\n    //     arr.push(str2.slice(12));\n    //   }\n\n    //   for (let file of files) {\n    //     let str1 = blog.coverImg.slice(12);\n      \n    //     let imgArr = [];\n    //     if (str1 === file) {\n    //       imgArr.push(str1);\n    //     }\n\n    //     let arr1 = [...imgArr, ...arr];\n        \n    //     if ( arr1.includes(file) ) {\n    //       fs.unlink(path.join(directory, file), (err) => {\n    //         if(err) {\n    //           console.log(err);\n    //         };\n    //       })\n    //     }\n    //   }\n    // })\n\n    let deleteBlog = await blogModel.deleteOne({\n      _id: blogId,\n      isPublished: true,\n    });\n\n    if (!deleteBlog) {\n      return res\n        .status(404)\n        .send({ status: false, message: \"Blog not found or already deleted\" });\n    }\n\n    return res\n      .status(200)\n      .send({ status: true, message: \"Blog deleted successfully\" });\n  } catch (error) {\n    return res.status(400).send({ status: false, message: error.message });\n  }\n};\n\nmodule.exports = {\n  createBlog,\n  getBlogs,\n  getBlogById,\n  updateBlogById,\n  getBlogByParams,\n  deleteBlogById\n};\n","const certificateModel = require(\"../models/certificateModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n// const { imageMV } = require(\"../middlewares/ImageUpload\");\r\n\r\n// ADD CERTIFICATE\r\nconst addCertificate = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    \r\n    let certificateData = []\r\n    if (typeof data.certificate === 'string') {\r\n      certificateData.push(JSON.parse(data.certificate));\r\n    } else {\r\n\r\n      for (let i=0; i<data.certificate.length; i++) {\r\n        certificateData.push(JSON.parse(data.certificate[i]));\r\n      }\r\n    }\r\n    \r\n    for (let i=0; i<certificateData.length; i++) {\r\n      await certificateModel.create(certificateData[i]);\r\n    }\r\n    \r\n    return res\r\n      .status(201)\r\n      .send({\r\n        status: true,\r\n        message: \"Certificate added successfully\"\r\n      });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// GET ALL CERTIFICATES\r\nconst getAllCertificates = async (req, res) => {\r\n  try {\r\n    let certificates = await certificateModel.find();\r\n\r\n    if (certificates.length === 0) {\r\n      return res.status(404).send({ status: false, message: 'No certificate found'});\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: certificates })\r\n\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message })\r\n  }\r\n}\r\n\r\nmodule.exports = { addCertificate, getAllCertificates };\r\n","const nodemailer = require(\"nodemailer\");\r\n\r\n// CONTACT US\r\n// Configure Nodemailer with your email provider's SMTP settings\r\n// create reusable transport method (opens pool of SMTP connections)\r\nvar smtpTransport = nodemailer.createTransport({\r\n  service: \"Gmail\",\r\n  auth: {\r\n    user: \"turtltechweb@gmail.com\",\r\n    pass: \"smtyjocjoesvochr\",\r\n  },\r\n});\r\n\r\nconst addContactUsDetails = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let { name, email, to, subject, text } = data;\r\n\r\n    // setup e-mail data with unicode symbols\r\n    let msg =\r\n      \"<h2 style='padding:0px; margin:0px'>Name: <strong style='color:blue;'>\" +\r\n      name +\r\n      \"</strong></h2> <p style='padding:0px; margin:0px; margin-top:10px;'>Email: \" +\r\n      email +\r\n      \"</p>  <p style='border:1px solid #d4fff8; max-width:800px; padding:10px'>\" +\r\n      text +\r\n      \" </p>\";\r\n    var mailOptions = {\r\n      from: `TurtlTech.com <${data.email}>`, // sender address\r\n      to: data.to, // list of receivers\r\n      subject: data.subject, // Subject line\r\n      // text: msg, // plaintext body\r\n      html: msg,\r\n    };\r\n\r\n    // send mail with defined transport object\r\n    smtpTransport.sendMail(mailOptions, function (error, response) {\r\n      if (error) {\r\n        return res\r\n          .status(400)\r\n          .send({\r\n            status: false,\r\n            message: \"An error occurred while sending the email.\",\r\n          });\r\n      } else {\r\n        return res.status(201).send({\r\n          status: true,\r\n          message: \"Email sent successfully!\",\r\n        });\r\n      }\r\n\r\n      // if you don't want to use this transport object anymore, uncomment following line\r\n      //smtpTransport.close(); // shut down the connection pool, no more messages\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addContactUsDetails };\r\n","const eventModel = require(\"../models/eventModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD EVENT\r\nconst addEvent = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    // console.log('Hello example', data);\r\n    let { title, images, story } = data;\r\n\r\n    \r\n    await eventModel.create({title, images, story});\r\n\r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"Event added successfully\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL EVENT\r\nconst getAllEvents = async (req, res) => {\r\n  try {\r\n    let events = await eventModel.find();\r\n\r\n    if (events.length === 0) {\r\n      return res.status(404).send({ status: false, message: \"No event found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: events });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addEvent, getAllEvents };\r\n","const { initializeApp } = require('firebase/app');\r\nconst { getStorage, ref, getDownloadURL, uploadBytesResumable } = require('firebase/storage');\r\nconst config = require('../middlewares/firebase');\r\n\r\n//Initialize a firebase application\r\ninitializeApp(config.firebaseConfig);\r\n\r\n// Initialize Cloud Storage and get a reference to the service\r\nconst storage = getStorage();\r\n\r\n// Setting up multer as a middleware to grab photo uploads\r\n\r\n\r\nconst uploadImage = async (blobFile) => {\r\n        const dateTime = giveCurrentDateTime();\r\n        const storageRef = ref(storage, `files/${dateTime.toString().replace(\" \",\"_\")+\"_\"+blobFile.name.replace(\" \",\"_\")}`);\r\n    \r\n        // // Create file metadata including the content type\r\n        const metadata = {\r\n            contentType: blobFile.mimetype,\r\n        };\r\n\r\n        // // Upload the file in the bucket storage\r\n        const snapshot = await uploadBytesResumable(storageRef, blobFile.data, metadata);\r\n        //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel\r\n        \r\n        // Grab the public url\r\n        const downloadURL = await getDownloadURL(snapshot.ref);\r\n        return {\r\n            message: 'file uploaded to firebase storage',\r\n            name: snapshot.metadata.name,\r\n            type: blobFile.mimetype,\r\n            imageURL: downloadURL\r\n        };\r\n};\r\n\r\nconst giveCurrentDateTime = () => {\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    const dateTime = date + ' ' + time;\r\n    return dateTime;\r\n}\r\n\r\nmodule.exports = { uploadImage }","const imageModel = require(\"../models/imageModel\");\r\nconst { uploadImage } = require('../controllers/firebaseImageController');\r\nconst {\r\n  isValid,\r\n  isValidName,\r\n  isValidRequestBody,\r\n  isValidObjectId,\r\n} = require(\"../utils/utils\");\r\n\r\n// UPLOAD IMAGE\r\nconst uploadImagefn = async (req, res) => {\r\n  try {\r\n\r\n    let { imgField } = req.body;\r\n    let {images} = req.files;\r\n\r\n    let img = await uploadImage(images);\r\n    let imageData = {\r\n      imageUrl:img.imageURL,\r\n      imgField:imgField\r\n     };\r\n    let imagesData = await imageModel.create(imageData);\r\n\r\n    return res\r\n      .status(201)\r\n      .send({ status: true, message: \"Image added\", data: imagesData });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL IMAGES\r\nconst getAllImages = async (req, res) => {\r\n  try {\r\n    let images = await imageModel.find().sort({ createdAt: -1 });\r\n\r\n    if (images.length === 0) {\r\n      return res.status(404).send({ status: false, message: \"No image found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: images });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { uploadImagefn, getAllImages };\r\n","const likesModel = require(\"../models/likesModel\");\r\nconst blogModel = require(\"../models/blogModel\");\r\nconst visitorModel = require(\"../models/visitorModel\");\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD LIKES\r\nconst addBlogLikesById = async (req, res) => {\r\n  try {\r\n    // let blogId = req.params.blogId;\r\n    let data = req.body;\r\n\r\n    let { blogId, visitorId, like, love, haha, wow, angry, fire } = data;\r\n\r\n    if (!isValid(blogId)) {\r\n      return res.status(400).send({ status: false, message: 'Blog id is required'})\r\n    }\r\n\r\n    if (!isValidObjectId(blogId)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid blog id, please enter a valid blog id\",\r\n      });\r\n    }\r\n\r\n    if (!isValid(visitorId)) {\r\n      return res.status(400).send({ status: false, message: 'Visitor id is required'})\r\n    }\r\n\r\n    if (!isValidObjectId(visitorId)) {\r\n      return res\r\n        .status(400)\r\n        .send({\r\n          status: false,\r\n          message: \"Invalid visitor id, please enter a valid visitor id\",\r\n        });\r\n    }\r\n\r\n    let blog = await blogModel.findOne({ _id: blogId });\r\n\r\n    if (!blog) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No blog found with this blog id\" });\r\n    }\r\n\r\n    let visitor = await visitorModel.findOne({ _id: visitorId });\r\n\r\n    if (!visitor) {\r\n      return res\r\n        .status(404)\r\n        .send({\r\n          status: false,\r\n          message: \"No visitor found with this visitor id\",\r\n        });\r\n    }\r\n\r\n    let likes = await likesModel.findOne({\r\n      blogId: blogId,\r\n      visitorId: visitorId,\r\n    });\r\n\r\n    if (!likes) {\r\n      let likeData = await likesModel.create(data);\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"Likes added\", data: likeData });\r\n    } else if (\"like\" in data) {\r\n      likes.like = likes.like + 1;\r\n      likes.love = 0;\r\n      likes.haha = 0;\r\n      likes.wow = 0;\r\n      likes.angry = 0;\r\n      likes.fire = 0;\r\n\r\n      if (likes.like > 1) {\r\n        likes.like = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"Like added\", data: likes });\r\n    }\r\n\r\n    // else if (\"dislike\" in data) {\r\n    //   if (likes.like > 0) {\r\n    //     likes.like = likes.like - 1;\r\n    //   } else {\r\n    //     likes.like = 0;\r\n    //   }\r\n    //   likes.dislike = likes.dislike + 1;\r\n\r\n    //   await likes.save();\r\n\r\n    //   return res\r\n    //     .status(201)\r\n    //     .send({ status: true, message: \"Dislike added\", data: likes });\r\n    // }\r\n    else if (\"love\" in data) {\r\n      likes.love = likes.love + 1;\r\n\r\n      likes.like = 0;\r\n      likes.haha = 0;\r\n      likes.wow = 0;\r\n      likes.angry = 0;\r\n      likes.fire = 0;\r\n\r\n      if (likes.love > 1) {\r\n        likes.love = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"love added\", data: likes });\r\n    } else if (\"haha\" in data) {\r\n      likes.haha = likes.haha + 1;\r\n\r\n      likes.love = 0;\r\n      likes.like = 0;\r\n      likes.wow = 0;\r\n      likes.angry = 0;\r\n      likes.fire = 0;\r\n\r\n      if (likes.haha > 1) {\r\n        likes.haha = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"haha added\", data: likes });\r\n    } else if (\"wow\" in data) {\r\n      likes.wow = likes.wow + 1;\r\n\r\n      likes.love = 0;\r\n      likes.haha = 0;\r\n      likes.like = 0;\r\n      likes.angry = 0;\r\n      likes.fire = 0;\r\n\r\n      if (likes.wow > 1) {\r\n        likes.wow = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"wow added\", data: likes });\r\n    } else if (\"angry\" in data) {\r\n      likes.angry = likes.angry + 1;\r\n\r\n      likes.love = 0;\r\n      likes.haha = 0;\r\n      likes.wow = 0;\r\n      likes.like = 0;\r\n      likes.fire = 0;\r\n\r\n      if (likes.angry > 1) {\r\n        likes.angry = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"angry added\", data: likes });\r\n    } else if (\"fire\" in data) {\r\n      likes.fire = likes.fire + 1;\r\n\r\n      likes.love = 0;\r\n      likes.haha = 0;\r\n      likes.wow = 0;\r\n      likes.angry = 0;\r\n      likes.like = 0;\r\n\r\n      if (likes.fire > 1) {\r\n        likes.fire = 0;\r\n\r\n        await likesModel.deleteOne({\r\n          blogId: blogId,\r\n          visitorId: visitorId,\r\n        });\r\n\r\n        return res\r\n          .status(200)\r\n          .send({ status: true, message: \"Like deleted from database\" });\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"fire added\", data: likes });\r\n    } else {\r\n      return res.status(400).send({ status: false, data: likes });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL lIKES\r\nconst getAllLikes = async (req, res) => {\r\n  try {\r\n    let blogId = req.params.id;\r\n    let likes = await likesModel.find({ blogId: blogId });\r\n\r\n    if (likes.length === 0) {\r\n      return res.status(404).send({ status: false, message: \"No likes found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, likes: likes.length });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// INCREASE LIKES\r\nconst incBlogLikesById = async (req, res) => {\r\n  try {\r\n    // let likesId = req.params.id;\r\n    let blogId = req.params.id;\r\n\r\n    if (!isValidObjectId(blogId)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid blog id, please enter a valid blog id\",\r\n      });\r\n    }\r\n\r\n    let visitorId = req.params.id;\r\n\r\n    if (!isValidObjectId(visitorId)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid visitor id, please enter a valid visitor id\",\r\n      });\r\n    }\r\n\r\n    // let blog = await blogModel.findOne({ _id: blogId });\r\n\r\n    // if (!blog) {\r\n    //   return res.status(404).send({ status: false, message: \"Blog not found\" });\r\n    // }\r\n\r\n    let body = req.body;\r\n\r\n    if (!isValidRequestBody(body)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter data in request body\" });\r\n    }\r\n\r\n    let likes = await likesModel.findOne({ blogId: blogId });\r\n\r\n    // let { like, love, haha, wow, angry, fire } = body;\r\n\r\n    if (\"like\" in body) {\r\n      likes.like = likes.like + 1;\r\n    }\r\n\r\n    if (\"love\" in body) {\r\n      likes.love = likes.love + 1;\r\n    }\r\n\r\n    if (\"haha\" in body) {\r\n      likes.haha = likes.haha + 1;\r\n    }\r\n\r\n    if (\"wow\" in body) {\r\n      likes.wow = likes.wow + 1;\r\n    }\r\n\r\n    if (\"angry\" in body) {\r\n      likes.angry = likes.angry + 1;\r\n    }\r\n\r\n    if (\"fire\" in body) {\r\n      likes.fire = likes.fire + 1;\r\n    }\r\n\r\n    await likes.save();\r\n\r\n    return res\r\n      .status(200)\r\n      .send({ status: true, message: \"Likes updated\", data: likes });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// ADD LIKES\r\nconst addBlogLikes = async (req, res) => {\r\n  try {\r\n    // let blogId = req.params.blogId;\r\n    let data = req.body;\r\n\r\n    let { blogId, like, love, haha, wow, angry, fire } = data;\r\n\r\n    let likes = await likesModel.findOne({\r\n      blogId: blogId,\r\n      visitorId: visitorId,\r\n    });\r\n\r\n    if (!likes.like) {\r\n      likes.like = 1;\r\n      let likeData = await likesModel.create(data);\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"Likes added\", data: likeData });\r\n    } else if (\"like\" in data) {\r\n      likes.like = likes.like + 1;\r\n\r\n      if (likes.like > 1) {\r\n        likes.like = 0;\r\n      }\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"Like added\", data: likes });\r\n    } else if (\"dislike\" in data) {\r\n      if (likes.like > 0) {\r\n        likes.like = likes.like - 1;\r\n      } else {\r\n        likes.like = 0;\r\n      }\r\n      likes.dislike = likes.dislike + 1;\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"Dislike added\", data: likes });\r\n    } else if (\"love\" in data) {\r\n      likes.love = likes.love + 1;\r\n\r\n      if (likes.love > 1) {\r\n        likes.love = 0;\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"love added\", data: likes });\r\n    } else if (\"haha\" in data) {\r\n      likes.haha = likes.haha + 1;\r\n\r\n      if (likes.haha > 1) {\r\n        likes.haha = 0;\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"haha added\", data: likes });\r\n    } else if (\"wow\" in data) {\r\n      likes.wow = likes.wow + 1;\r\n\r\n      if (likes.wow > 1) {\r\n        likes.wow = 0;\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"wow added\", data: likes });\r\n    } else if (\"angry\" in data) {\r\n      likes.angry = likes.angry + 1;\r\n\r\n      if (likes.angry > 1) {\r\n        likes.angry = 0;\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"angry added\", data: likes });\r\n    } else if (\"fire\" in data) {\r\n      likes.fire = likes.fire + 1;\r\n\r\n      if (likes.fire > 1) {\r\n        likes.fire = 0;\r\n      }\r\n\r\n      await likes.save();\r\n\r\n      return res\r\n        .status(201)\r\n        .send({ status: true, message: \"fire added\", data: likes });\r\n    } else {\r\n      return res.status(400).send({ status: false, data: likes });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addBlogLikesById,\r\n  incBlogLikesById,\r\n  getAllLikes,\r\n  addBlogLikes,\r\n};\r\n","const pageImageModel = require(\"../models/pageImagesModel\");\r\n\r\nconst addPageImages = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let { pageName, imageUrl, altText } = data;\r\n\r\n    let checkPageName = await pageImageModel.findOne({ pageName: pageName });\r\n\r\n    if (checkPageName) {\r\n      checkPageName.imageUrl = imageUrl;\r\n      checkPageName.altText = altText;\r\n      await checkPageName.save();\r\n      return res\r\n        .status(200)\r\n        .send({ status: true, message: \"Page image updated\" });\r\n    }\r\n    // console.log('Hello example', data);\r\n    await pageImageModel.create(data);\r\n    return res.status(201).send({ status: true, message: \"Page images added\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL PAGE IMAGES\r\nconst getAllPageImages = async (req, res) => {\r\n  try {\r\n    let pageImages = await pageImageModel.find();\r\n\r\n    if (pageImages.length === 0) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No page image found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: pageImages });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET IMAGE BY PAGE NAME\r\nconst getImageByPageName = async (req, res) => {\r\n  try {\r\n    let pageName = req.params.pageName;\r\n\r\n    let pageImage = await pageImageModel.findOne({ pageName: pageName });\r\n\r\n    if (!pageName) {\r\n      return res\r\n        .status(404)\r\n        .send({\r\n          status: false,\r\n          message: \"No page image found with this page name\",\r\n        });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: pageImage });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addPageImages, getAllPageImages, getImageByPageName };\r\n","const express = require('express');\r\n// const ejs = require('ejs');\r\nconst paypal = require('paypal-rest-sdk');\r\n\r\npaypal.configure({\r\n    'mode': 'sandbox', //sandbox or live\r\n    'client_id': '####your-client-id######',\r\n    'client_secret': '####your-client-secret#####'\r\n  });\r\n\r\nconst app = express();\r\n\r\n// app.set('view engine', 'ejs');\r\n// app.use(express.static('views'));\r\n\r\n\r\n// ADD PAYMENT\r\nconst addPayment = async (req, res) => {\r\n  try {\r\n    const create_payment_json = {\r\n      intent: \"sale\",\r\n      payer: {\r\n        payment_method: \"paypal\",\r\n      },\r\n      redirect_urls: {\r\n        return_url: \"http://localhost:3003/success\",\r\n        cancel_url: \"http://localhost:3003/cancel\",\r\n      },\r\n      transactions: [\r\n        {\r\n          item_list: {\r\n            items: [\r\n              {\r\n                name: \"service name\",\r\n                sku: \"001\",\r\n                price: \"50000.00\",\r\n                currency: \"INR\",\r\n                quantity: 1,\r\n              },\r\n            ],\r\n          },\r\n          amount: {\r\n            currency: \"INR\",\r\n            total: \"50000.00\",\r\n          },\r\n          description: \"service description\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    paypal.payment.create(create_payment_json, function (error, payment) {\r\n      if (error) {\r\n        throw error;\r\n      } else {\r\n        for (let i = 0; i < payment.links.length; i++) {\r\n          if (payment.links[i].rel === \"approval_url\") {\r\n            return res.status(200).redirect(payment.links[i].href);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET PAYMENT\r\nconst getPayment = async (req, res) => {\r\n  try {\r\n    const payerId = req.params.PayerID;\r\n    const paymentId = req.params.paymentId;\r\n\r\n    const execute_payment_json = {\r\n      payer_id: payerId,\r\n      transactions: [\r\n        {\r\n          amount: {\r\n            currency: \"INR\",\r\n            total: \"675.00\",\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n    paypal.payment.execute(\r\n      paymentId,\r\n      execute_payment_json,\r\n      function (error, payment) {\r\n        if (error) {\r\n        //   console.log(error.response);\r\n          throw error;\r\n        } else {\r\n        //   console.log(JSON.stringify(payment));\r\n          return res.status(200).send({ status: true, message: \"Success\" });\r\n        }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addPayment, getPayment };","const portfolioModel = require(\"../models/portfolioModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\nconst { imageMV } = require(\"../middlewares/ImageUpload\");\r\n\r\n// ADD PORTFOLIO\r\nconst addPortfolio = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    // let file = req.files;\r\n\r\n    let {\r\n      coverImgUrl,\r\n      coverImgAlt,\r\n      title,\r\n      description,\r\n      content,\r\n      tags,\r\n      portfolioField,\r\n    } = data;\r\n\r\n    // if (!isValid(title)) {\r\n    //     return res.status(400).send({ status: false, message: 'Title is required'})\r\n    // }\r\n\r\n    let obj1 = JSON.parse(portfolioField);\r\n    // console.log('Hello example', obj1.length);\r\n    if (!obj1.field) {\r\n      return res.status(400).send({ status: false, message : 'Portfolio field is required'})\r\n    }\r\n\r\n    let portfolioData = {\r\n      description,\r\n      portfolioField,\r\n    };\r\n\r\n\r\n    let key = Math.random().toString(36).slice(2,8);\r\n    portfolioData.title = title;\r\n    portfolioData.portfolioUID = key;\r\n    portfolioData.content = JSON.parse(content);\r\n\r\n    portfolioData.tags = tags.split(\"#\").filter((el) => {\r\n      return el.length > 0 && el.trim();\r\n    });\r\n    let obj = {\r\n      coverImgUrl: coverImgUrl,\r\n      coverImgAlt: coverImgAlt ? coverImgAlt : \"turtltech.com\",\r\n    };\r\n\r\n    portfolioData.coverImage = obj;\r\n\r\n    portfolioData.seoData = JSON.parse(data.seoData);\r\n\r\n    \r\n    portfolioData.portfolioField = obj1.field;\r\n    portfolioData.categoryTitle = obj1.categoryName;\r\n\r\n    let portfolioAdded = await portfolioModel.create(portfolioData);\r\n\r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"Portfolio added successfully\",\r\n      // data: portfolioAdded,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL PORTFOLIO\r\nconst getAllPortfoios = async (req, res) => {\r\n  try {\r\n    let portfolioData = await portfolioModel.find();\r\n\r\n    return res.status(200).send({ status: true, data: portfolioData });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// GET BLOG BY BLOG SLUG\r\nconst getPortfolioByParams = async (req, res) => {\r\n  try {\r\n    let slug = req.params.slug;\r\n\r\n    let portfolio = await portfolioModel.findOne({ slug: slug });\r\n    \r\n\r\n    if (!portfolio) {\r\n      return res.status(404).send({ status: false, message: \"Portfolio not found\" });\r\n    }\r\n\r\n    portfolio.portfolioViews = portfolio.portfolioViews + 1;\r\n    await portfolio.save();\r\n\r\n    return res.status(200).send({ status: true, data: portfolio });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nconst getPortfolioByField = async (req, res) => {\r\n  try {\r\n    let field = req.params.field;\r\n\r\n    let portfolios = await portfolioModel.find({ portfolioField: field });\r\n    \r\n\r\n    if (!portfolios) {\r\n      return res.status(404).send({ status: false, message: \"Portfolio not found\" });\r\n    }\r\n    return res.status(200).send({ status: true, data: portfolios });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addPortfolio, getAllPortfoios, getPortfolioByParams, getPortfolioByField };\r\n","const serviceCategoryModel = require(\"../models/serviceCategoryModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD SERVICE CATEGORY\r\nconst addServiceCategory = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let { title, iconUrl, iconAlt, description, content, tags } = data;\r\n\r\n    let checkTitle = await serviceCategoryModel.findOne({ title: title });\r\n\r\n    if (checkTitle) {\r\n      return res\r\n        .status(400)\r\n        .send({\r\n          status: false,\r\n          message:\r\n            \"This category is already exists, please enter another category\",\r\n        });\r\n    }\r\n\r\n    let serviceCategoryData = {\r\n      title,\r\n      description\r\n    };\r\n\r\n    serviceCategoryData.tags = tags.split(\"#\").filter((el) => {\r\n      return el.length > 0 && el.trim();\r\n    });\r\n\r\n    let obj = {\r\n      iconUrl: iconUrl,\r\n      iconAlt: iconAlt ? iconAlt : \"turtltech.com\",\r\n    };\r\n\r\n    serviceCategoryData.categoryIcon = obj;\r\n\r\n    serviceCategoryData.seoData = JSON.parse(data.seoData);\r\n\r\n    serviceCategoryData.content = JSON.parse(content);\r\n\r\n    await serviceCategoryModel.create(serviceCategoryData);\r\n\r\n    return res\r\n      .status(201)\r\n      .send({ status: true, message: \"Service category added successfully\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL SERVICE CATEGORIES\r\nconst getAllServiceCategories = async (req, res) => {\r\n  try {\r\n    let serviceCategories = await serviceCategoryModel.find();\r\n\r\n    return res.status(200).send({ status: true, data: serviceCategories });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL SERVICE CATEGORIES BY SLUG\r\nconst getServiceCategorBySlug = async (req, res) => {\r\n  try {\r\n    let slug = req.params.slug;\r\n    let serviceCategory = await serviceCategoryModel.findOne({ slug: slug });\r\n\r\n    if (!serviceCategory) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"This service category not found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: serviceCategory });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addServiceCategory,\r\n  getAllServiceCategories,\r\n  getServiceCategorBySlug,\r\n};\r\n","const serviceModel = require(\"../models/serviceModel\");\r\nconst userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst { imageMV } = require(\"../middlewares/ImageUpload\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD CONTENT\r\nconst addService = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    let file = req.files;\r\n\r\n    // console.log(\"content:\", data.content, \"file\", file.filename);\r\n\r\n    if (!isValidRequestBody(data)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter data in body\" });\r\n    }\r\n\r\n    // if (file.length === 0) {\r\n    //   return res.status(400)\r\n    //   .send({ status: false, message: 'Please add atleast one file'})\r\n    // }\r\n\r\n    let { title, description, imgUrl } = data;\r\n\r\n    let serviceData = {\r\n      title,\r\n      description,\r\n      imgUrl\r\n    };\r\n\r\n    serviceData.imgUrl = await imageMV(file.imgUrl, \"serviceImages\");\r\n\r\n    let createService = await serviceModel.create(serviceData);\r\n\r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"Service section added\",\r\n      data: createService,\r\n    });\r\n\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET SERVICES\r\nconst getAllServices = async (req, res) => {\r\n  try {\r\n    let services = await serviceModel.find();\r\n\r\n    if (!services.length) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No service found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, services: services });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// UPDATE SERVICE SECTION\r\nconst updateServiceSection = async (req, res) => {\r\n  try {\r\n    let serviceId = req.params.serviceId;\r\n\r\n    if (!isValidObjectId(secId)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Invalid section Id\" });\r\n    }\r\n\r\n    let data = await serviceModel.findById(serviceId);\r\n\r\n    if (!data) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No section found with this id\" });\r\n    }\r\n\r\n    let reqBody = req.body;\r\n\r\n    let file = req.files;\r\n\r\n    let { title, description, imgUrl } = reqBody;\r\n    \r\n    if (\"title\" in reqBody) {\r\n      data.title = title;\r\n    }\r\n\r\n    if (\"description\" in reqBody){\r\n      data.description = description;\r\n    }\r\n\r\n    // if (file && file.length > 0) {\r\n    //   let url = `http://localhost:4001/service/${req.file.filename}`;\r\n    //   data.ImageFile = url;\r\n    // }\r\n\r\n    await data.save();\r\n\r\n    return res.status(200).send({ status: true, message: \"Section updated\", data: data });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// Update User By User Id\r\nconst UpdateSectionById = async function (req, res) {\r\n  try {\r\n    let secId = req.params.secId;\r\n\r\n    if (!isValidObjectId(secId)) {\r\n      return res.status(400).send({ status: false, message: 'Invalid section id, please enter a valid section id'})\r\n    }\r\n\r\n    let data = req.body;\r\n    // console.log(data);\r\n\r\n    return res\r\n      .status(200)\r\n      .send({\r\n        status: true,\r\n        message: \"Section updated successfully\",\r\n        data: data,\r\n      });\r\n  } catch (err) {\r\n    return res.status(500).send({ status: false, message: err.message });\r\n  }\r\n};\r\n\r\n// DELETE SERVICE SECTION\r\nconst deleteServiceSection = async (req, res) => {\r\n  try {\r\n    let secId = req.params.secId;\r\n\r\n    if (!isValidObjectId(secId)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid section id, please enter a valid section id\",\r\n      });\r\n    }\r\n\r\n    let deleteSection = await serviceModel.deleteOne({ _id: secId });\r\n\r\n    if (!deleteSection) {\r\n      return res.status(404).send({\r\n        status: false,\r\n        message: \"Section not found or already deleted\",\r\n      });\r\n    }\r\n\r\n    return res\r\n      .status(200)\r\n      .send({ status: true, message: \"Service section deleted successfully\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addService,\r\n  getAllServices,\r\n  updateServiceSection,\r\n  deleteServiceSection,\r\n  UpdateSectionById,\r\n};\r\n","const testimonialModel = require(\"../models/testimonialModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n\r\n// ADD TESTIMONIAL\r\nconst addTestimonial = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let testimonialData = []\r\n    if (typeof data.testimonials === 'string') {\r\n      testimonialData.push(JSON.parse(data.testimonials));\r\n    } else {\r\n\r\n      for (let i=0; i<data.testimonials.length; i++) {\r\n        testimonialData.push(JSON.parse(data.testimonials[i]));\r\n      }\r\n    }\r\n    \r\n    for (let i=0; i<testimonialData.length; i++) {\r\n      await testimonialModel.create(testimonialData[i]);\r\n    }\r\n   \r\n    return res\r\n      .status(201)\r\n      .send({\r\n        status: true,\r\n        message: \"Testimonial added successfully\",\r\n      });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// GET ALL TESTIMONIALS\r\nconst getAllTestimonials = async (req, res) => {\r\n  try {\r\n    let testimonials = await testimonialModel.find();\r\n\r\n    if (testimonials.length === 0) {\r\n      return res.status(404).send({ status: false, message: 'No testimonial found'});\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: testimonials })\r\n\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message })\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = { addTestimonial, getAllTestimonials };\r\n","const turtlFAQModel = require(\"../models/turtlFAQModel\");\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD FAQ\r\nconst addFAQ = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let { category, question, answer } = data;\r\n\r\n    let faqData = {\r\n      category,\r\n      question,\r\n      answer,\r\n    };\r\n\r\n    await turtlFAQModel.create(faqData);\r\n\r\n    return res.status(201).send({ status: true, message: \"FAQ section added\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL FAQs\r\nconst getAllFAQs = async (req, res) => {\r\n  try {\r\n    let faqs = await turtlFAQModel.find();\r\n\r\n    // if (faqs.length === 0) {\r\n    //   return res.status(404).send({ status: false, message: \"No FAQ found\" });\r\n    // }\r\n\r\n    return res.status(200).send({ status: true, data: faqs });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// UPDATE FAQ BY FAQ ID\r\nconst updateFAQById = async (req, res) => {\r\n  try {\r\n    let faqId = req.params.faqId;\r\n\r\n    if (!isValidObjectId(faqId)) {\r\n      return res\r\n        .status(400)\r\n        .send({\r\n          status: false,\r\n          message: \"Invalid faqId, please enter a valid faqId\",\r\n        });\r\n    }\r\n\r\n    let faq = await turtlFAQModel.findById(faqId);\r\n\r\n    if (!faq) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No FAQ found with this id\" });\r\n    }\r\n\r\n    let body = req.body;\r\n\r\n    if (\"category\" in body) {\r\n      faq.category = body.category;\r\n    }\r\n\r\n    if (\"question\" in body) {\r\n      faq.question = body.question;\r\n    }\r\n\r\n    if (\"answer\" in body) {\r\n      faq.answer = body.answer;\r\n    }\r\n\r\n    await faq.save();\r\n\r\n    return res\r\n      .status(200)\r\n      .send({ status: true, message: \"FAQ updated successfully\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addFAQ, getAllFAQs, updateFAQById };\r\n","const turtlInfoModel = require(\"../models/turtlInfoModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n\r\n// ADD TURTL INFO\r\nconst addTurtlInfo = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    // console.log(\"Hello example\", data);\r\n    let { serviceEmail, address, contactNumber, socialMediaLinks, googleMap } =\r\n      data;\r\n\r\n    // if (!isValid(serviceEmail)) {\r\n    //   return res\r\n    //     .status(400)\r\n    //     .send({ status: false, message: \"Service email is required\" });\r\n    // }\r\n\r\n    // if (!isValid(address)) {\r\n    //   return res\r\n    //     .status(400)\r\n    //     .send({ status: false, message: \"Address is required\" });\r\n    // }\r\n\r\n    // if (!isValid(contactNumber)) {\r\n    //   return res\r\n    //     .status(400)\r\n    //     .send({ status: false, message: \"Contact number is required\" });\r\n    // }\r\n\r\n    // if (!isValid(contactNumber)) {\r\n    //   return res\r\n    //     .status(400)\r\n    //     .send({ status: false, message: \"Contact number is required\" });\r\n    // }\r\n\r\n    // let turtlInfoData = {\r\n    //     serviceEmail,\r\n    //     address,\r\n    //     contactNumber,\r\n    //     socialMediaLinks,\r\n    //     googleMap\r\n    // };\r\n\r\n    // let obj = {\r\n    //   pageName: pageName,\r\n    //   imageUrl: imageUrl,\r\n    //   altText: altText ? altText : 'turtltech.com'\r\n    // }\r\n\r\n    // turtlInfoData.pageImages = obj;\r\n\r\n    // let obj = {\r\n    //   types: type,\r\n    //   url: url,\r\n    // }\r\n\r\n    let obj = [];\r\n    \r\n    if (socialMediaLinks !== undefined) {\r\n      if (typeof socialMediaLinks === \"string\") {\r\n        obj.push(JSON.parse(socialMediaLinks));\r\n      } else {\r\n        for (let i = 0; i < socialMediaLinks.length; i++) {\r\n          obj.push(JSON.parse(socialMediaLinks[i]));\r\n        }\r\n      }\r\n    }\r\n  \r\n    // turtlInfoData.socialMediaLinks = obj;\r\n\r\n    let objData = {\r\n      serviceEmail,\r\n      address,\r\n      contactNumber,\r\n      socialMediaLinks,\r\n      googleMap,\r\n    };\r\n\r\n    objData.socialMediaLinks = obj;\r\n\r\n    if (data.subsidiaryAddress) {\r\n      objData.subsidiaryAddress = JSON.parse(data.subsidiaryAddress);\r\n    }\r\n\r\n    let checkTurtlInfo = await turtlInfoModel.findOne({ address: address });\r\n    if (checkTurtlInfo) {\r\n      checkTurtlInfo.serviceEmail = serviceEmail;\r\n      checkTurtlInfo.address = address;\r\n      checkTurtlInfo.contactNumber = contactNumber;\r\n      checkTurtlInfo.socialMediaLinks = obj;\r\n      checkTurtlInfo.googleMap = googleMap;\r\n      \r\n\r\n      await checkTurtlInfo.save();\r\n\r\n      return res\r\n        .status(200)\r\n        .send({ status: true, message: \"Turtl Info updated\" });\r\n    }\r\n     \r\n    let turtlInfoAdded = await turtlInfoModel.create(objData);\r\n\r\n    \r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"Turtl info added successfully\",\r\n      data: turtlInfoAdded\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL TURTL INFO\r\nconst getTurtlInfo = async (req, res) => {\r\n  try {\r\n    let turtlInfo = await turtlInfoModel.find();\r\n    if (turtlInfo.length === 0) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No turtl info found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: turtlInfo[0] });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addTurtlInfo, getTurtlInfo };\r\n","const turtlSEOModel = require(\"../models/turtlSEOModel\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\n\r\n// ADD TURTL SEO\r\nconst addTurtlSEO = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let { pageName, seoData } = data;\r\n\r\n    // console.log(\"Hello example\", data);\r\n\r\n    if (!isValid(pageName)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Page name is required\" });\r\n    }\r\n\r\n    let checkPageName = await turtlSEOModel.findOne({ pageName: pageName });\r\n\r\n    if (checkPageName) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message:\r\n          \"This page SEO is already done, please try for different pages or edit this page SEO\",\r\n      });\r\n    }\r\n\r\n    await turtlSEOModel.create(data);\r\n\r\n    return res.status(201).send({ status: true, message: \"Turtl SEO added\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET ALL TURTL SEO\r\nconst getAllSEO = async (req, res) => {\r\n  try {\r\n    let turtlseos = await turtlSEOModel.find();\r\n\r\n    if (turtlseos.length === 0) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No SEO name found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: turtlseos });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET PAGE SEO by Name\r\nconst getSEOByPageName = async (req, res) => {\r\n  try {\r\n    let turtlseos = await turtlSEOModel.findOne({\r\n      pageName: req.params.pageName,\r\n    });\r\n\r\n    if (!turtlseos) {\r\n      return res.status(404).send({ status: false, message: \"No Page found\" });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, data: turtlseos });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// UPDATE TURTL SEO DATA\r\nconst updateTurtlSEOData = async (req, res) => {\r\n  try {\r\n    let seoId = req.params.seoId;\r\n\r\n    if (!isValidObjectId(seoId)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid pageId, please enter a valid pageId\",\r\n      });\r\n    }\r\n\r\n    let pageSEO = await turtlSEOModel.findById(seoId);\r\n\r\n    if (!pageSEO) {\r\n      return res.status(404).send({\r\n        status: false,\r\n        message: \"No page found with this page id\",\r\n      });\r\n    }\r\n\r\n    let body = req.body;\r\n\r\n    let seoData = {};\r\n \r\n    if (\"seoData\" in body) {\r\n      \r\n      if (\"pageTitle\" in body.seoData) {\r\n\r\n        pageSEO.seoData.pageTitle = body.seoData.pageTitle;\r\n      }\r\n\r\n      if (\"pageDescription\" in body.seoData) {\r\n        pageSEO.seoData.pageDescription = body.seoData.pageDescription;\r\n      }\r\n\r\n      if (\"pageKeywords\" in body.seoData) {\r\n        pageSEO.seoData.pageKeywords = body.seoData.pageKeywords;\r\n      }\r\n\r\n      if (\"pageUrl\" in body.seoData) {\r\n        pageSEO.seoData.pageUrl = body.seoData.pageUrl;\r\n      }\r\n\r\n      if (\"imageUrl\" in body.seoData) {\r\n        pageSEO.seoData.imageUrl = body.seoData.imageUrl;\r\n      }\r\n\r\n      if (\"siteName\" in body.seoData) {\r\n        pageSEO.seoData.siteName = body.seoData.siteName;\r\n      }\r\n\r\n      if (\"altImageText\" in body.seoData) {\r\n        pageSEO.seoData.altImageText = body.seoData.altImageText;\r\n      }\r\n\r\n      if (\"imageHight\" in body.seoData) {\r\n        pageSEO.seoData.imageHight = body.seoData.imageHight;\r\n      }\r\n\r\n      if (\"imageWidth\" in body.seoData) {\r\n        pageSEO.seoData.imageWidth = body.seoData.imageWidth;\r\n      }\r\n    }\r\n\r\n    await pageSEO.save();\r\n\r\n    return res\r\n      .status(200)\r\n      .send({ status: true, message: \"Page SEO data updated successfully\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addTurtlSEO,\r\n  getAllSEO,\r\n  updateTurtlSEOData,\r\n  getSEOByPageName,\r\n};\r\n","const express = require(\"express\");\r\nconst axios = require(\"axios\");\r\nconst cheerio = require(\"cheerio\");\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\napp.use(cors());\r\n\r\n// const app = express();\r\n\r\nconst getURLCount = async (req, res) => {\r\n  \r\n  try {\r\n    // const { domain } = req.query;\r\n    let { domain } = req.body;\r\n    // Fetch the HTML content of the domain\r\n    const { data } = await axios.get(domain);\r\n\r\n    // Use Cheerio to parse the HTML\r\n    const $ = cheerio.load(data);\r\n\r\n    // Find all anchor tags (links) in the HTML\r\n    const anchors = $(\"a\");\r\n\r\n    // Count the total number of URLs\r\n    const totalCount = anchors.length;\r\n\r\n    return res.status(200).send({ status: true, count: totalCount });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { getURLCount };\r\n","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { secretKey } = require('../middlewares/config');\r\n// const aurhorities = require(\"../actionType\");\r\nconst {\r\n  isValidRequestBody,\r\n  isValidObjectId,\r\n  isValid,\r\n  isValidName,\r\n  isvalidEmail,\r\n  isValidMoblie,\r\n  isValidPassword,\r\n} = require(\"../utils/utils\");\r\n\r\nconst {\r\n  Authentication,\r\n  Authorization,\r\n  getUserId,\r\n  getUser,\r\n} = require(\"../middlewares/auth\");\r\n\r\n\r\n// ADD USER\r\nconst addUser = async function (req, res) {\r\n  try {\r\n    let data = req.body;\r\n\r\n    if (!isValidRequestBody(data)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter data in body\" });\r\n    }\r\n\r\n    let { name, email, password, mobile, role, joiningDate } = data;\r\n\r\n    if (!isValid(name)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter the name\" });\r\n    }\r\n\r\n    if (!isValidName(name)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Name should only contain alphabets\" });\r\n    }\r\n\r\n    if (!isValid(email)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Email-ID is required\" });\r\n    }\r\n\r\n    if (!isvalidEmail(email))\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid Email id. Ex: example12@gmail.com\",\r\n      });\r\n\r\n    let checkEmail = await userModel.findOne({\r\n      email: email,\r\n      isDeleted: false,\r\n    });\r\n    if (checkEmail) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"This email is already exists\",\r\n      });\r\n    }\r\n\r\n    if (!isValidMoblie(mobile))\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Invalid mobile number\",\r\n      });\r\n\r\n    let checkMobile = await userModel.findOne({ mobile: mobile });\r\n    if (checkMobile) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"This mobile is already exists\",\r\n      });\r\n    }\r\n\r\n    if (!isValid(password)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"password is required\" });\r\n    }\r\n\r\n    if (password.length < 8 || password.length > 15) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: \"Password must in between 8 to 15 characters\",\r\n      });\r\n    }\r\n\r\n    if (!isValidPassword(password))\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: `Password must include atleast one special character[@$!%?&], one uppercase, one \r\n                lowercase, one number and should be mimimum 8 to 15 characters long for Example: Password@123`,\r\n      });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    password = hashedPassword;\r\n\r\n    if (!isValid(role)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"role is required\" });\r\n    }\r\n\r\n    const userData = {\r\n      name,\r\n      email,\r\n      password,\r\n      mobile,\r\n      role,\r\n      joiningDate\r\n    };\r\n\r\n    // userData.authority = [\"ADD_PRODUCT\", \"SALE_VOID\"];\r\n\r\n    let addData = await userModel.create(userData);\r\n    delete addData.password\r\n    return res.status(201).send({\r\n      status: true,\r\n      message: \"User added successfully\",\r\n      data: addData,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// Login User\r\nconst loginUser = async function (req, res) {\r\n  try {\r\n    let body = req.body;\r\n    const { email, password } = body;\r\n\r\n    if (!isValidRequestBody(body))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Body Should not be empty\" });\r\n\r\n    if (!isValid(email))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Email is required\" });\r\n\r\n    if (!isvalidEmail(email))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter valid email\" });\r\n\r\n    if (!isValidPassword(password)) {\r\n      return res.status(400).send({\r\n        status: false,\r\n        message: `Password must include atleast one special character[@$!%?&], one uppercase, one \r\n            lowercase, one number and should be mimimum 8 to 15 characters long for Example:Password@123`,\r\n      });\r\n    }\r\n\r\n    if (!isValid(password))\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Password is required\" });\r\n\r\n    let admin = await adminModel.findOne({ email: email });\r\n    let adminId;\r\n    let user;\r\n    if (!admin) {\r\n      user = await userModel.findOne({ email: email, isDeleted: false });\r\n\r\n      if (!user) {\r\n        return res\r\n          .status(401)\r\n          .send({ status: false, message: \"Please use valid credentials\" });\r\n      } else {\r\n        adminId = user._id.toString();\r\n      }\r\n    } else {\r\n      adminId = admin._id.toString();\r\n    }\r\n\r\n    bcrypt.compare(\r\n      password,\r\n      admin ? admin.password : user.password,\r\n      function (err, result) {\r\n        hasAccess(result);\r\n      }\r\n    );\r\n\r\n    function hasAccess(result) {\r\n      if (result) {\r\n        let token = jwt.sign(\r\n          {\r\n            userId: admin ? admin._id.toString() : user._id.toString(),\r\n            Application: \"turtltechbackend\",\r\n            Author: \"nirajkumar\",\r\n          },\r\n          secretKey,\r\n          { expiresIn: \"24h\" }\r\n        );\r\n        // res.setHeader(\"x-api-key\", token);\r\n        res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n        if (!admin) {\r\n          user.password = \"\";\r\n          if (user.role === \"ADMIN\") {\r\n            return res.status(201).send({\r\n              status: true,\r\n              message: \"Successfully loggedin\",\r\n              userId: user._id,\r\n              userInfo: user,\r\n              token: token,\r\n            });\r\n          }\r\n          if (user.authority.includes(\"HR\")) {\r\n            appData1.permissionsList = permissionsList;\r\n            appData1.employees = employees;\r\n          }\r\n\r\n          return res.status(201).send({\r\n            status: true,\r\n            message: \"Successfully loggedin\",\r\n            userId: user._id,\r\n            userInfo: user,\r\n            token: token,\r\n          });\r\n\r\n        } else {\r\n          admin.password = \"\";\r\n          return res.status(201).send({\r\n            status: true,\r\n            message: \"Successfully loggedin\",\r\n            userId: admin._id,\r\n            userInfo: admin,\r\n            authority: aurhorities.userAuthorities,\r\n            token: token\r\n          });\r\n        }\r\n      } else {\r\n        return res.status(401).send({\r\n          status: false,\r\n          message: \"login denied\",\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ status: false, message: err.message });\r\n  }\r\n};\r\n\r\n// CREATE USER\r\nconst createUser = async function (req, res) {\r\n  try {\r\n    let data = req.body;\r\n\r\n    let userId = await getUserId(req.headers[\"authorization\"]);\r\n    let userInfo = await getUser(userId);\r\n\r\n    if (userInfo.userType === \"ADMIN\") {\r\n      // let adminId = req.params.adminId || req.query.adminId;\r\n\r\n      if (!isValidRequestBody(data)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"Please enter data in body\" });\r\n      }\r\n\r\n      let {\r\n        name,\r\n        email,\r\n        password,\r\n        gender,\r\n        DOB,\r\n        mobile,\r\n        role,\r\n        authority,\r\n        joiningDate,\r\n      } = data;\r\n\r\n      if (!isValid(name)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"Please enter the name\" });\r\n      }\r\n\r\n      if (!isValidName(name)) {\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"Name should only contain alphabets\",\r\n        });\r\n      }\r\n\r\n      if (!isValid(email)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"Email-ID is required\" });\r\n      }\r\n\r\n      if (!isvalidEmail(email))\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"Invalid Email id. Ex: example12@gmail.com\",\r\n        });\r\n\r\n      let checkEmail = await userModel.findOne({\r\n        email: email,\r\n        isDeleted: false,\r\n      });\r\n      if (checkEmail) {\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"This email is already exists\",\r\n        });\r\n      }\r\n\r\n      if (!isValid(gender)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"Gender is required\" });\r\n      }\r\n\r\n      if (!isValid(DOB)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"DOB is required\" });\r\n      }\r\n\r\n      if (!isValidMoblie(mobile))\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"Invalid mobile number\",\r\n        });\r\n\r\n      let checkMobile = await userModel.findOne({\r\n        mobile: mobile,\r\n        isDeleted: false,\r\n      });\r\n      if (checkMobile) {\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"This mobile is already exists\",\r\n        });\r\n      }\r\n\r\n      if (!isValid(password)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"password is required\" });\r\n      }\r\n\r\n      if (password.length < 8 || password.length > 15) {\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: \"Password must in between 8 to 15 characters\",\r\n        });\r\n      }\r\n\r\n      if (!isValidPassword(password))\r\n        return res.status(400).send({\r\n          status: false,\r\n          message: `Password must include atleast one special character[@$!%?&], one uppercase, one \r\n                  lowercase, one number and should be mimimum 8 to 15 characters long for Example: Password@123`,\r\n        });\r\n\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n      password = hashedPassword;\r\n\r\n      if (!isValid(role)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"role is required\" });\r\n      }\r\n\r\n      const userData = {\r\n        name,\r\n        email,\r\n        password,\r\n        gender,\r\n        DOB,\r\n        mobile,\r\n        role,\r\n        authority,\r\n        joiningDate,\r\n      };\r\n\r\n      userData.adminId = userInfo.adminId;\r\n      if (role === \"ADMIN\") {\r\n        userData.authority = [];\r\n      }\r\n\r\n      let addData = await (\r\n        await userModel.create(userData)\r\n      ).populate(\"adminId\");\r\n\r\n      addData.password = \"\";\r\n\r\n      return res.status(201).send({\r\n        status: true,\r\n        message: \"User added successfully\",\r\n        data: addData,\r\n      });\r\n    } else {\r\n      return res.status(403).send({\r\n        status: false,\r\n        message: \"You are not authorize to add employees\",\r\n      });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// GET USER DETAILS WITH SALARY\r\nconst getEmpDetailsWithSalary = async (req, res) => {\r\n  try {\r\n    let userId = await getUserId(req.headers[\"authorization\"]);\r\n    let userInfo = await getUser(userId);\r\n\r\n    let employees = await userModel.find({\r\n      adminId: userInfo.adminId,\r\n      isDeleted: false,\r\n    });\r\n\r\n    if (employees.length === 0) {\r\n      return res.status(404).send({\r\n        status: false,\r\n        message: \"No employee found with this admin id\",\r\n      });\r\n    }\r\n\r\n    return res.status(200).send({ status: true, employeesData: employees });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// UPDATE USER BY USER ID\r\nconst updateUserById = async (req, res) => {\r\n  try {\r\n    let employeeId = req.params.id;\r\n\r\n    let userId = await getUserId(req.headers[\"authorization\"]);\r\n    let userInfo = await getUser(userId);\r\n\r\n    if (!isValidObjectId(employeeId)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Invalid employee id, please enter\" });\r\n    }\r\n\r\n    let employee = await userModel.findOne({\r\n      _id: employeeId,\r\n      adminId: userInfo.adminId,\r\n      isDeleted: false,\r\n    });\r\n\r\n    if (!employee) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: false, message: \"No employee found\" });\r\n    }\r\n\r\n    let body = req.body;\r\n\r\n    if (!isValidRequestBody(body)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Please enter data in body\" });\r\n    }\r\n\r\n    if (\"name\" in body && body.name !== \"\") {\r\n      employee.name = body.name;\r\n    }\r\n\r\n    if (\"email\" in body && body.email !== \"\") {\r\n      employee.email = body.email;\r\n    }\r\n\r\n    if (\"password\" in body && body.password !== \"\") {\r\n      employee.password = body.password;\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n      password = hashedPassword;\r\n    }\r\n\r\n    if (\"gender\" in body && body.gender !== \"\") {\r\n      employee.gender = body.gender;\r\n    }\r\n\r\n    if (\"DOB\" in body && body.DOB !== \"\") {\r\n      employee.DOB = body.DOB;\r\n    }\r\n\r\n    if (\"mobile\" in body && body.mobile !== \"\") {\r\n      employee.mobile = body.mobile;\r\n    }\r\n\r\n    if (\"role\" in body && body.role !== \"\") {\r\n      employee.role = body.role;\r\n    }\r\n\r\n    if (\"authority\" in body && body.authority.length !== 0) {\r\n      employee.authority = body.authority;\r\n    }\r\n\r\n    if (\"joiningDate\" in body && body.joiningDate !== \"\") {\r\n      employee.joiningDate = body.joiningDate;\r\n    }\r\n\r\n    await employee.save();\r\n    employee.password = \"\";\r\n    return res.status(200).send({\r\n      status: true,\r\n      message: \"Employee data updated\",\r\n      data: employee,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// DELETE USER BY USER ID\r\nconst deleteUserById = async (req, res) => {\r\n  try {\r\n    let employeeId = req.params.id;\r\n\r\n    let userId = await getUserId(req.headers[\"authorization\"]);\r\n    let userInfo = await getUser(userId);\r\n\r\n    if (!isValidObjectId(employeeId)) {\r\n      return res\r\n        .status(400)\r\n        .send({ status: false, message: \"Invalid employee id\" });\r\n    }\r\n\r\n    let deleteEmployee = await userModel.findOneAndUpdate(\r\n      {\r\n        _id: employeeId,\r\n        adminId: userInfo.adminId,\r\n        isDeleted: false,\r\n      },\r\n\r\n      {\r\n        isDeleted: true,\r\n        deletedAt: new Date(),\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    if (!deleteEmployee) {\r\n      return res.status(404).send({\r\n        status: false,\r\n        message: \"Employee not found or already deleted\",\r\n      });\r\n    }\r\n\r\n    return res\r\n      .status(200)\r\n      .send({ status: true, message: \"Employee deleted successfully\" });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addUser,\r\n  loginUser,\r\n  createUser,\r\n  getEmpDetailsWithSalary,\r\n  updateUserById,\r\n  deleteUserById,\r\n};\r\n","const visitorModel = require(\"../models/visitorModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst passport = require(\"passport\");\r\n\r\nconst {\r\n  isValid,\r\n  isValidObjectId,\r\n  isValidRequestBody,\r\n  isvalidEmail,\r\n} = require(\"../utils/utils\");\r\nconst { imageMV } = require(\"../middlewares/ImageUpload\");\r\n\r\n// ADD VISITORS\r\nconst addBlogVisitors = async (req, res) => {\r\n  try {\r\n    let data = req.body;\r\n    let file = req.files;\r\n\r\n    let { name, email, password, sub, picture } = data;\r\n\r\n    if (!isValid(name)) {\r\n      return res.status.send({\r\n        status: false,\r\n        message: \"Visitor name is required\",\r\n      });\r\n    }\r\n\r\n    if (!isValid(email)) {\r\n      return res.status.send({\r\n        status: false,\r\n        message: \"Visitor email is required\",\r\n      });\r\n    }\r\n\r\n    if (!isvalidEmail(email)) {\r\n      return res.status.send({\r\n        status: false,\r\n        message: \"Invalid email, please enter a valid email\",\r\n      });\r\n    }\r\n\r\n    let checkEmail = await visitorModel.findOne({ email: email });\r\n\r\n    if (checkEmail) {\r\n      return res.status.send({\r\n        status: false,\r\n        message: \"Duplicate email, please enter a unique email\",\r\n      });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    password = hashedPassword;\r\n\r\n    let visitorData = {\r\n      name,\r\n      email,\r\n      password,\r\n      sub,\r\n      picture,\r\n    };\r\n\r\n    // blogData.coverImg = await imageMV(file.coverImg, 'blogImages');\r\n    visitorData.picture = await imageMV(file.picture, \"blogImages\");\r\n\r\n    let visitorAdded = await visitorModel.create(visitorData);\r\n\r\n    return res\r\n      .status(201)\r\n      .send({ status: true, message: \"Visitor added\", data: visitorAdded });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\n// Login\r\n// router.post(\"/login\", (req, res, next) => {\r\n//   passport.authenticate(\"local\", {\r\n//     successRedirect: \"/dashboard\",\r\n//     failureRedirect: \"/users/login\",\r\n//     failureFlash: true,\r\n//   })(req, res, next);\r\n// });\r\n\r\n// Logout\r\n// router.get(\"/logout\", (req, res) => {\r\n//   req.logout();\r\n//   req.flash(\"success_msg\", \"You are logged out\");\r\n//   res.redirect(\"/users/login\");\r\n// });\r\n\r\n// 662735685445-svt9fusga04lpckp5ef7bnmuu2r4gbcq.apps.googleusercontent.com\r\n\r\nmodule.exports = { addBlogVisitors };\r\n","const {v4: uuid} = require('uuid');\nconst fs = require('fs');\n\n\n// const storage = multer.diskStorage({\n//     destination: function (req, file, cb) {\n//         const path1 = \"./public/images/\";\n//         fs.mkdirSync(path1, {recursive: true })\n//         cb(null, path1);\n//     },\n//     filename: function (req, file, cb) {\n//         return cb(null, Date.now() + \"-Images\" + path.extname(file.originalname));\n//     },\n// });\n\n// const upload = multer({ storage: storage });\n\n// module.exports = { upload };\n\n//middleware\n\nconst imageMV = async (image, folderName) => {\n  const path = `./public/uploads/${folderName}/`;\n  fs.mkdirSync(path, { recursive: true });\n  let preName = uuid()+'_';\n  await image.mv(path + preName + image.name);\n  return `/${folderName}/${preName}${image.name}`;\n};\n\n\nmodule.exports = { imageMV }","const adminModel = require(\"../models/adminModel\");\nconst blogModel = require(\"../models/blogModel\");\n\nconst jwt = require(\"jsonwebtoken\");\nconst { isValidObjectId } = require(\"../utils/utils\");\nconst { secretKey, tokenSecretKey } = require('../middlewares/config');\n// Authentication\nconst Authentication = async function (req, res, next) {\n  try {\n    // const token = req.headers[\"x-api-key\"] || req.headers[\"x-Api-key\"];\n    // console.log(token);\n    let tokenWithBearer = req.headers[\"authorization\"];\n\n    if (!tokenWithBearer) {\n      return res\n        .status(400)\n        .send({ status: false, message: \"token is required\" });\n    }\n\n    let tokenArray = tokenWithBearer.split(\" \");\n    let token = tokenArray[1];\n    // console.log(token);\n\n    if (!token) {\n      return res.status(404).send({ status: false, message: \"Invalid Token\" });\n    }\n\n    let decodedToken;\n    jwt.verify(\n      token,\n      tokenSecretKey,\n      (err, decode) => {\n        if (err) {\n          return res.status(401).send({ status: false, message: err.message });\n        } else {\n          decodedToken = decode;\n          let LoginUserId = decodedToken.adminId || decodedToken.userId;\n          req[\"adminId\"] = LoginUserId;\n          // req[\"userId\"] = LoginUserId;\n\n          // console.log(LoginUserId);\n          next();\n        }\n      }\n    );\n  } catch (err) {\n    return res.status(500).send({ status: false, message: err.message });\n  }\n};\n\n// GET USER ID\nconst getUserId = async (tokenWithBearer) => {\n  if (!tokenWithBearer) {\n    return res\n      .status(400)\n      .send({ status: false, message: \"token is required\" });\n  }\n  let tokenArray = tokenWithBearer.split(\" \");\n  let token = tokenArray[1];\n  let LoginUserId;\n\n  if (!token) {\n    return res.status(404).send({ status: false, message: \"Invalid Token\" });\n  }\n\n  let decodedToken;\n  jwt.verify(\n    token,\n    secretKey,\n    (err, decode) => {\n      if (err) {\n        return res.status(401).send({ status: false, message: err.message });\n      } else {\n        decodedToken = decode;\n        LoginUserId = decodedToken.userId;\n        //  console.log(LoginUserId);\n      }\n    }\n  );\n  return LoginUserId;\n};\n\n// GET USER\nconst getUser = async (LoginUserId) => {\n  let admin = await adminModel.findById(LoginUserId);\n  if (admin) {\n    return {\n      adminId: admin._id.toString(),\n    };\n  }\n};\n\n// Authorization\nconst Authorization = async function (req, res, next) {\n  try {\n    let userid = req.userId;\n    if (!isValidObjectId(userid)) {\n      return res\n        .status(400)\n        .send({\n          status: false,\n          message: `This Admin Id => ${userid}, is invalid`,\n        });\n    }\n\n    const findUser = await adminModel.findOne({ _id: userid });\n\n    if (!findUser)\n      return res\n        .status(404)\n        .send({ status: false, message: \"Admin not found\" });\n\n    next();\n  } catch (err) {\n    return res.status(500).send({ status: false, message: err.message });\n  }\n};\n\nmodule.exports = { Authentication, getUserId, getUser, Authorization };\n","const dotenv = require(\"dotenv\");\r\n\r\n// getting all ENV variables before starting another processes\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n  secretKey: process.env.SECRET_KEY,\r\n  mongoDbUrl: process.env.MONGO_DB_URI,\r\n  tokenSecretKey: process.env.TOKEN_SECRET_KEY,\r\n  port: process.env.PORT,\r\n  firebaseApiKey: process.env.FIREBASE_API_KEY,\r\n  firebaseAuthDomain: process.env.FIREBASE_AUTH_DOMAIN,\r\n  firebaseProjectId: process.env.FIREBASE_PROJECT_ID,\r\n  firebaseStorageBucket: process.env.FIREBASE_STORAGE_BUCKET,\r\n  firebaseMessagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\r\n  firebaseAppId: process.env.FIREBASE_APP_ID,\r\n};\r\n","const dotenv = require(\"dotenv\");\r\nconst {\r\n  firebaseApiKey,\r\n  firebaseAuthDomain,\r\n  firebaseProjectId,\r\n  firebaseStorageBucket,\r\n  firebaseMessagingSenderId,\r\n  firebaseAppId,\r\n} = require(\"../middlewares/config\");\r\ndotenv.config();\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: firebaseApiKey,\r\n  authDomain: firebaseAuthDomain,\r\n  projectId: firebaseProjectId,\r\n  storageBucket: firebaseStorageBucket,\r\n  messagingSenderId: firebaseMessagingSenderId,\r\n  appId: firebaseAppId,\r\n};\r\n\r\nmodule.exports = { firebaseConfig };\r\n","const mongoose = require(\"mongoose\");\n\nlet adminSchema = new mongoose.Schema(\n    {\n        userKey: {\n            type: String,\n\n        },\n\n        name: {\n            type: String,\n            required: true,\n            trim: true\n        },\n\n        email: {\n            type: String,\n            unique: true,\n            required: true,\n            trim: true,\n        },\n        \n        password: {\n            type: String,\n            min: 8,\n            max: 15,\n            required: true\n        },\n\n        role: {\n            type: String,\n            required: true,\n            trim: true\n        },\n\n        // homePageImages: {\n        //     type: String,\n        // },\n\n        // products: {\n        //     type: [String]\n        // },\n\n        // testimonials: {\n        //     type: String\n        // },\n\n        // certificates: {\n        //     type: String\n        // },\n\n        // partnerships: {\n        //     type: String\n        // },\n\n        // awardsAndRecognitions: {\n        //     type: String\n        // }\n\n    }, { timestamps: true })\n\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require(\"mongoose\");\nconst slugify = require(\"slugify\");\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst blogSchema = new mongoose.Schema(\n  {\n    authorId: {\n      type: ObjectId,\n      ref: \"Author\",\n    },\n\n    blogUID: {\n      type: String,\n    },\n\n    blogViews: {\n      type: Number,\n      default: 0\n    },\n\n    blogTitle: {\n      type: String,\n      required: true,\n    },\n\n    coverImg: {\n      imageUrl: {\n        type: String,\n      },\n      \n      altText: { type: String },\n    },\n\n    markdown: {\n      type: String,\n    },\n\n    slug: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n\n    description: {\n      type: String,\n      required: true,\n    },\n\n    sections: [],\n\n    quote: {\n      text: {\n        type: String,\n      },\n\n      quoteAuthor: {\n        type: String,\n      },\n    },\n\n    blogFooter: {\n      content: {\n        type: String,\n      },\n\n      message: {\n        type: String,\n      },\n\n      blogAuthor: {\n        type: ObjectId,\n        ref: \"Author\",\n      },\n    },\n\n    tags: [{ type: String }],\n\n    publishedAt: {\n      type: Date,\n      default: null,\n    },\n\n    isPublished: {\n      type: Boolean,\n      default: false,\n    },\n\n    likes: {\n      type: ObjectId,\n      ref: \"Like\",\n    },\n\n    seoData: {\n      pageTitle: {\n        type: String,\n      },\n      pageDescription: {\n        type: String,\n      },\n      pageKeywords: {\n        type: String,\n      },\n      pageUrl: {\n        type: String,\n      },\n      imageUrl: {\n        type: String,\n      },\n      siteName: {\n        type: String,\n      },\n      altImageText: {\n        type: String,\n      },\n      imageHight: {\n        type: String,\n      },\n      imageWidth: {\n        type: String,\n      },\n    },\n  },\n\n  { timestamps: true }\n);\n\nblogSchema.pre(\"validate\", function (next) {\n  if (this.blogTitle) {\n    let blog = this.blogTitle + \" \" + this.blogUID;\n    this.slug = slugify(blog, { lower: true, strict: true });\n  }\n\n  next();\n});\n\nmodule.exports = mongoose.model(\"Blog\", blogSchema);\n\n","const mongoose = require(\"mongoose\");\r\n\r\nlet certificateSchema = new mongoose.Schema({\r\n    title: { type: String },\r\n    image: { type: String },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Certificate', certificateSchema);","const mongoose = require(\"mongoose\");\r\n\r\nlet eventSchema = new mongoose.Schema({\r\n    title: { type: String },\r\n    images: [{ type: String }],\r\n    story: { type: String }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Event', eventSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst imageSchema = new mongoose.Schema(\r\n  {\r\n    imageUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n\r\n    imgField: {\r\n      type: String\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Image\", imageSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst likeSchema = new mongoose.Schema({\r\n\r\n    blogId: {\r\n        type: ObjectId,\r\n        ref: 'Blog'\r\n    },\r\n\r\n    visitorId: {\r\n        type: ObjectId,\r\n        ref: 'Visitor'\r\n    },\r\n\r\n    like: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    },\r\n\r\n    love: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    },\r\n\r\n    haha: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    },\r\n\r\n    wow: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    },\r\n\r\n    angry: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    },\r\n\r\n    fire: {\r\n        type: Number,\r\n        default: 0,\r\n        required: true\r\n    }\r\n\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Like', likeSchema);","const mongoose = require(\"mongoose\");\r\n\r\nlet pageImageSchema = new mongoose.Schema({\r\n    \r\n          pageName: { type: String },\r\n  \r\n          imageUrl: { type: String },\r\n  \r\n          altText: { type: String },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('PageImage', pageImageSchema);","const mongoose = require(\"mongoose\");\r\nconst slugify = require(\"slugify\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst portfolioSchema = new mongoose.Schema(\r\n  {\r\n    coverImage: {\r\n      coverImgUrl: { type: String },\r\n\r\n      coverImgAlt: { type: String },\r\n    },\r\n\r\n    title: { type: String },\r\n\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n\r\n    content: {\r\n      type: String,\r\n    },\r\n\r\n    portfolioViews: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    portfolioUID: {\r\n      type: String,\r\n    },\r\n\r\n    portfolioField: {\r\n      type: String,\r\n    },\r\n\r\n    categoryTitle: {\r\n      type: String\r\n    },\r\n\r\n    slug: {type: String, unique: true, required: true },\r\n    \r\n    tags: [{ type: String }],\r\n\r\n    seoData: {\r\n      pageTitle: {\r\n        type: String,\r\n      },\r\n      pageDescription: {\r\n        type: String,\r\n      },\r\n      pageKeywords: {\r\n        type: String,\r\n      },\r\n      pageUrl: {\r\n        type: String,\r\n      },\r\n      imageUrl: {\r\n        type: String,\r\n      },\r\n      siteName: {\r\n        type: String,\r\n      },\r\n      altImageText: {\r\n        type: String,\r\n      },\r\n      imageHight: {\r\n        type: String,\r\n      },\r\n      imageWidth: {\r\n        type: String,\r\n      },\r\n    },\r\n  },\r\n\r\n  { timestamps: true }\r\n);\r\n\r\nportfolioSchema.pre(\"validate\", function (next) {\r\n  if (this.title) {\r\n    let str = this.title + \" \" + this.portfolioUID;\r\n    this.slug = slugify(str, { lower: true, strict: true });\r\n  }\r\n  next();\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Portfolio\", portfolioSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\nconst slugify = require('slugify');\r\n\r\n\r\nconst serviceCategorySchema = new mongoose.Schema({\r\n    title: {\r\n        type: String,\r\n        unique: true,\r\n        required: true\r\n    },\r\n\r\n    categoryIcon: {\r\n        iconUrl: {\r\n            type: String,\r\n        },\r\n\r\n        iconAlt: {\r\n            type: String,\r\n        }\r\n    },\r\n\r\n    description: {\r\n        type: String\r\n    },\r\n\r\n    content: {\r\n        type: String,\r\n    },\r\n\r\n    slug: {\r\n        type: String,\r\n        unique: true,\r\n        required: true,\r\n    },\r\n\r\n    tags: [{\r\n        type: String,\r\n    }],\r\n\r\n    seoData: {\r\n        pageTitle: {\r\n          type: String,\r\n        },\r\n        pageDescription: {\r\n          type: String,\r\n        },\r\n        pageKeywords: {\r\n          type: String,\r\n        },\r\n        pageUrl: {\r\n          type: String,\r\n        },\r\n        imageUrl: {\r\n          type: String,\r\n        },\r\n        siteName: {\r\n          type: String,\r\n        },\r\n        altImageText: {\r\n          type: String,\r\n        },\r\n        imageHight: {\r\n          type: String,\r\n        },\r\n        imageWidth: {\r\n          type: String,\r\n        },\r\n      },\r\n},\r\n{ timestamps: true });\r\n\r\nserviceCategorySchema.pre(\"validate\", function (next) {\r\n    if (this.title) {\r\n      this.slug = slugify(this.title, { lower: true, strict: true });\r\n    }\r\n    next();\r\n  });\r\n\r\nmodule.exports = mongoose.model('ServiceCategory', serviceCategorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst serviceSchema = new mongoose.Schema({\r\n\r\n    title: {\r\n        type: String,\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n    },\r\n\r\n    imgUrl: {\r\n        type: String,\r\n    }\r\n\r\n}, { timestamps: true })\r\n\r\nmodule.exports = mongoose.model('Service', serviceSchema);","const mongoose = require(\"mongoose\");\r\n\r\nlet testimonialSchema = new mongoose.Schema({\r\n    name: { type: String},\r\n    designation: { type: String },\r\n    story: { type: String },\r\n    rating: { type: Number },\r\n    image: { type: String },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Testimonial', testimonialSchema);","const mongoose = require('mongoose');\r\n\r\nconst turtlFAQSchema = new mongoose.Schema({\r\n    category: {\r\n        type: String,\r\n    },\r\n\r\n    question: {\r\n        type: String,\r\n    },\r\n\r\n    answer: {\r\n        type: String,\r\n    }\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model('FAQ', turtlFAQSchema);","const mongoose = require(\"mongoose\");\r\n\r\nlet turtlInfoSchema = new mongoose.Schema(\r\n  {\r\n    serviceEmail: { type: String, unique: true },\r\n\r\n    address: { type: String },\r\n\r\n    contactNumber: [{ type: String }],\r\n\r\n    socialMediaLinks: [\r\n      {\r\n        types: {\r\n          type: String,\r\n        },\r\n\r\n        url: {\r\n          type: String,\r\n        },\r\n      },\r\n    ],\r\n\r\n    subsidiaryAddress: [{\r\n      city: {\r\n        type: String,\r\n      },\r\n\r\n      state: {\r\n        type: String\r\n      },\r\n\r\n      country: {\r\n        type: String\r\n      },\r\n\r\n      address: {\r\n        type: String\r\n      }\r\n    }],\r\n\r\n    googleMap: { type: String },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"TurtlInfo\", turtlInfoSchema);\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst turtlSEOSchema = new mongoose.Schema(\r\n  {\r\n    pageName: {\r\n      type: String,\r\n    },\r\n\r\n    seoData: {\r\n      pageTitle: {\r\n        type: String,\r\n      },\r\n      pageDescription: {\r\n        type: String,\r\n      },\r\n      pageKeywords: {\r\n        type: String,\r\n      },\r\n      pageUrl: {\r\n        type: String,\r\n      },\r\n      imageUrl: {\r\n        type: String,\r\n      },\r\n      siteName: {\r\n        type: String,\r\n      },\r\n      altImageText: {\r\n        type: String,\r\n      },\r\n      imageHight: {\r\n        type: String,\r\n      },\r\n      imageWidth: {\r\n        type: String,\r\n      },\r\n    },\r\n  },\r\n\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"TurtlSEO\", turtlSEOSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nlet userSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n            trim: true\r\n        },\r\n\r\n        mobile: {\r\n            type: Number,\r\n            required: true,\r\n            trim: true\r\n        },\r\n\r\n        adminId:{\r\n            type: ObjectId,\r\n            ref: 'Admin'\r\n        },\r\n\r\n        role: {\r\n            type: String,\r\n            required: true,\r\n            trim: true\r\n        },\r\n\r\n        authority: {\r\n            type: [String]\r\n        },\r\n\r\n        joiningDate: {\r\n            type: Date\r\n        },\r\n\r\n        deletedAt: { type: Date, default: null },\r\n        \r\n        isDeleted: { type: Boolean, default: false },\r\n\r\n    }, { timestamps: true })\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst visitorSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        required: true,\r\n        trim: true\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        trim: true,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    sub: {\r\n        type: String,\r\n    },\r\n\r\n    image: {\r\n        imageUrl: { type: String },\r\n        \r\n        altText: { type: String },\r\n    }\r\n});\r\n\r\nmodule.exports = mongoose.model('Visitor', visitorSchema)","const express = require('express');\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\n// app.use('/service', express.static('./public/images/'));\r\n\r\nconst adminController = require(\"../controllers/adminController\");\r\nconst userController = require('../controllers/userController');\r\nconst blogController = require(\"../controllers/blogController\")\r\nconst serviceController = require('../controllers/serviceController');\r\nconst imageController = require('../controllers/imageController');\r\nconst likesController = require('../controllers/likesController');\r\nconst visitorsController = require('../controllers/visitorController');\r\nconst testimonialController = require('../controllers/testimonialController');\r\nconst portfolioController = require('../controllers/portfolioController');\r\nconst certificateController = require('../controllers/certificateController');\r\nconst turtlInfoController = require('../controllers/turtlInfoController');\r\nconst eventController = require('../controllers/eventController');\r\nconst pageImageController = require('../controllers/pageImageController');\r\nconst turtlSEOController = require('../controllers/turtlSEOController');\r\nconst contactUsController = require('../controllers/contactUsController');\r\nconst turtlFAQController = require('../controllers/turtlFAQController');\r\nconst serviceCategoryController = require('../controllers/serviceCategoryController');\r\nconst urlCountController = require('../controllers/urlCountingAPI');\r\nconst paymentGatewayController = require('../controllers/paymentGatewayController');\r\nconst firebaseImageController = require('../controllers/firebaseImageController');\r\n\r\n// const { upload } = require('../middlewares/ImageUpload');\r\n// const upload = multer({ storage: multer.memoryStorage() });\r\n\r\n\r\nconst { Authentication, Authorization } = require('../middlewares/auth');\r\n\r\n\r\n\r\n// Admin's APIs ->\r\nrouter.post(\"/admin\", adminController.createAdmin);\r\nrouter.post(\"/login\", adminController.loginAdmin);\r\n\r\n// User's APIs\r\nrouter.post(\"/user\", Authentication, userController.addUser);\r\nrouter.post(\"/loginUser\", userController.loginUser);\r\n\r\n\r\n// Likes APIs\r\nrouter.post(\"/likes\", likesController.addBlogLikesById);\r\nrouter.post(\"/like\", likesController.addBlogLikes);\r\nrouter.get(\"/likes/:id\", likesController.getAllLikes);\r\nrouter.put(\"/likes/:id\", likesController.incBlogLikesById);\r\n\r\n\r\n// VISITORS APIs\r\nrouter.post(\"/visitor\", visitorsController.addBlogVisitors);\r\n\r\n\r\n// BLOG API\r\nrouter.post(\"/blog\", Authentication, blogController.createBlog);\r\nrouter.get(\"/blogs\", blogController.getBlogs);\r\n// router.get(\"/blog/:blogId\", blogController.getBlogById);\r\nrouter.get(\"/blog/:slug\", blogController.getBlogByParams);\r\nrouter.put(\"/blog/:blogId\", Authentication, blogController.updateBlogById);\r\nrouter.delete(\"/blog/:blogId\", Authentication, blogController.deleteBlogById);\r\n\r\n\r\n// IMAGE API\r\nrouter.post(\"/imageupload\", Authentication, imageController.uploadImagefn);\r\nrouter.get(\"/images\", imageController.getAllImages);\r\n\r\n\r\n// SERVICE API\r\nrouter.post(\"/service\", Authentication, serviceController.addService);\r\nrouter.get(\"/services\", serviceController.getAllServices);\r\nrouter.put(\"/service/:secId\", Authentication, serviceController.updateServiceSection);\r\nrouter.delete(\"/service/:secId\", Authentication, serviceController.deleteServiceSection);\r\n\r\n// TESTIMONIAL API\r\nrouter.post(\"/testimonial\", Authentication, testimonialController.addTestimonial);\r\nrouter.get(\"/testimonials\", testimonialController.getAllTestimonials);\r\n\r\n// PORTFOLIO API\r\nrouter.post(\"/portfolio\", Authentication, portfolioController.addPortfolio);\r\nrouter.get(\"/portfolios\", portfolioController.getAllPortfoios);\r\nrouter.get(\"/services/:slug\", portfolioController.getPortfolioByParams);\r\nrouter.get(\"/services/portfolios/:field\", portfolioController.getPortfolioByField);\r\n\r\n// CERTIFICATE API\r\nrouter.post(\"/certificate\", Authentication, certificateController.addCertificate);\r\nrouter.get(\"/certificates\", certificateController.getAllCertificates);\r\n\r\n// TURTL INFO API\r\nrouter.post(\"/info\", Authentication, turtlInfoController.addTurtlInfo);\r\nrouter.get(\"/turtlinfo\", turtlInfoController.getTurtlInfo);\r\n\r\n// EVENT API\r\nrouter.post(\"/event\", Authentication, eventController.addEvent);\r\nrouter.get(\"/events\", eventController.getAllEvents);\r\n\r\n// PAGE IMAGE API\r\nrouter.post(\"/pageimages\", Authentication, pageImageController.addPageImages);\r\nrouter.get(\"/allpageimages\", pageImageController.getAllPageImages);\r\nrouter.get(\"/pageimage/:pageName\", pageImageController.getImageByPageName);\r\n\r\n// TURTL SEO API\r\nrouter.post(\"/turtlseo\", Authentication, turtlSEOController.addTurtlSEO);\r\nrouter.get(\"/getallseos\", turtlSEOController.getAllSEO);\r\nrouter.get(\"/turtlseo/:pageName\", turtlSEOController.getSEOByPageName);\r\nrouter.put(\"/turtlseo/:seoId\", Authentication, turtlSEOController.updateTurtlSEOData);\r\n\r\n// CONTACT US API\r\nrouter.post(\"/contactus\", contactUsController.addContactUsDetails);\r\n\r\n// FAQ APIs\r\nrouter.post(\"/turtlfaq\", Authentication, turtlFAQController.addFAQ);\r\nrouter.get(\"/turtlfaqs\", turtlFAQController.getAllFAQs);\r\nrouter.put(\"/turtlfaq/:faqId\", Authentication, turtlFAQController.updateFAQById);\r\n\r\n// SERVICE CATEGORY APIs\r\nrouter.post(\"/servicecategory\", Authentication, serviceCategoryController.addServiceCategory);\r\nrouter.get(\"/servicecategories\", serviceCategoryController.getAllServiceCategories);\r\nrouter.get(\"/servicecategory/:slug\", serviceCategoryController.getServiceCategorBySlug);\r\n\r\n// URL COUNT API\r\nrouter.post(\"/urlcount\", urlCountController.getURLCount);\r\n\r\n// PAYMENT APIs\r\nrouter.post(\"/addpayment\", Authentication, paymentGatewayController.addPayment);\r\nrouter.get(\"/getpayment\", paymentGatewayController.getPayment);\r\n\r\n// IMAGE API\r\nrouter.post(\"/upload\", firebaseImageController.uploadImage);\r\n\r\nmodule.exports = router;","const ObjectId = require('mongoose').Types.ObjectId;\n\nconst isValidRequestBody = (requestBody) => {\n    return Object.keys(requestBody).length > 0;\n}\n\nconst isValidObjectId = (objectId) => {\n    if (!ObjectId.isValid(objectId)) return false;\n    return true;\n};\n\nconst isValid = (value) => {\n    if (typeof value === \"undefined\" || typeof value === null) return false;\n    if (typeof value === \"string\" && value.trim().length == 0) return false;\n    return true;\n};\n\nlet isValidName = function(name) {\n    let nameRegex = /^[A-Za-z\\s]{1,}[A-Za-z\\s]{0,}$/;\n    return nameRegex.test(name);\n};\n\nconst isvalidEmail = function(gmail) {\n    let regex = /^\\w+([\\.-]?\\w+)@\\w+([\\.-]?\\w+)(\\.\\w{2,3})+$/;\n    return regex.test(gmail);\n};\n\nlet isValidPassword = function(password) {\n    let regexPassword =\n    /^[a-zA-Z0-9*@]{12,25}$/;\n    return regexPassword.test(password);\n};\n\nconst isValidMoblie = function(mobile) {\n    let regex =\n        /^(?:(?:\\+|0{0,2})91(\\s*|[\\-])?|[0]?)?([6789]\\d{2}([-]?)\\d{3}([-]?)\\d{4})$/;\n    return regex.test(mobile);\n};\n\nconst isValidGST = function(GST) {\n    let regex = /\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/;\n    return regex.test(GST);\n};\n\nconst isValidImg = (img) => {\n    const reg = /image\\/png|image\\/jpeg|image\\/jpg/;\n    return reg.test(img)\n}\n\nmodule.exports = { isValidRequestBody, isValidObjectId, isValid, isValidName, isvalidEmail, isValidPassword, isValidMoblie, isValidGST, isValidImg };","module.exports = require(\"axios\");","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"cheerio\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"firebase/app\");","module.exports = require(\"firebase/storage\");","module.exports = require(\"fs\");","module.exports = require(\"helmet\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"nodemailer\");","module.exports = require(\"passport\");","module.exports = require(\"paypal-rest-sdk\");","module.exports = require(\"slugify\");","module.exports = require(\"uuid\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst helmet = require(\"helmet\");\r\nconst route = require(\"./src/routes/routes.js\");\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require('cors');\r\nconst passport = require('passport');\r\nconst { port, mongoDbUrl } = require(\"./src/middlewares/config.js\");\r\n\r\n\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use(fileUpload());\r\napp.use(cors());\r\n// app.use(helmet());\r\n// app.use(passport.initialize());\r\n// app.use(passport.session());\r\n\r\n// app.use(bodyParser.urlencoded({extended: false}));\r\napp.use(\"/\", express.static('public/uploads'));\r\n\r\n// app.use('/service', express.static('./public/images/'));\r\n\r\n// app.use('/images', express.static('./public/images'));\r\n\r\n\r\nmongoose\r\n  .connect(\r\n    mongoDbUrl,\r\n    { useNewUrlParser: true }\r\n  )\r\n  .then(() => console.log(\"Connected with Database\"))\r\n  .catch((err) => console.log(err));\r\n\r\napp.use(\"/\", route);\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"<h1>Welcome to TurtlTech</h1>\");\r\n});\r\n\r\napp.listen(port, () =>\r\n  console.log(\"App is running on port\", port)\r\n);\r\n"],"names":["adminModel","jwt","bcrypt","tokenSecretKey","isValidRequestBody","isValid","isvalidEmail","isValidPassword","module","exports","createAdmin","async","req","res","data","body","status","send","message","name","email","password","findOne","length","hash","adminData","createData","create","error","loginAdmin","admin","compare","err","result","token","sign","adminId","_id","toString","Assignment","Author","expiresIn","setHeader","hasAccess","blogModel","upload","imageMV","isValidObjectId","isValidImg","createBlog","blogTitle","tags","description","sections","coverImgUrl","coverImgAlt","blogData","split","filter","el","trim","key","Math","random","slice","blogUID","isPublished","publishedAt","Date","secArr","sec","JSON","parse","push","content","abc","imageUrl","altText","coverImg","seoData","blog","getBlogs","blogs","find","sort","createdAt","getBlogById","blogId","params","findById","updateBlogById","files","mimetype","updatedImgUrl","quote","blogFooter","blogImage","save","updateData","getBlogByParams","slug","blogViews","deleteBlogById","deleteOne","certificateModel","addCertificate","certificateData","certificate","i","getAllCertificates","certificates","smtpTransport","createTransport","service","auth","user","pass","addContactUsDetails","to","subject","text","msg","mailOptions","from","html","sendMail","response","eventModel","addEvent","title","images","story","getAllEvents","events","initializeApp","getStorage","ref","getDownloadURL","uploadBytesResumable","firebaseConfig","storage","uploadImage","blobFile","dateTime","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","giveCurrentDateTime","storageRef","replace","metadata","contentType","snapshot","downloadURL","type","imageURL","imageModel","isValidName","uploadImagefn","imgField","imageData","imagesData","getAllImages","likesModel","visitorModel","addBlogLikesById","visitorId","like","love","haha","wow","angry","fire","likes","likeData","incBlogLikesById","id","getAllLikes","addBlogLikes","dislike","pageImageModel","addPageImages","pageName","checkPageName","getAllPageImages","pageImages","getImageByPageName","pageImage","express","paypal","configure","addPayment","create_payment_json","intent","payer","payment_method","redirect_urls","return_url","cancel_url","transactions","item_list","items","sku","price","currency","quantity","amount","total","payment","links","rel","redirect","href","getPayment","payerId","PayerID","paymentId","execute_payment_json","payer_id","execute","portfolioModel","addPortfolio","portfolioField","obj1","field","portfolioData","portfolioUID","obj","coverImage","categoryTitle","categoryName","getAllPortfoios","getPortfolioByParams","portfolio","portfolioViews","getPortfolioByField","portfolios","serviceCategoryModel","addServiceCategory","iconUrl","iconAlt","serviceCategoryData","categoryIcon","getAllServiceCategories","serviceCategories","getServiceCategorBySlug","serviceCategory","serviceModel","addService","file","imgUrl","serviceData","createService","getAllServices","services","updateServiceSection","serviceId","secId","reqBody","deleteServiceSection","UpdateSectionById","testimonialModel","addTestimonial","testimonialData","testimonials","getAllTestimonials","turtlFAQModel","addFAQ","category","question","answer","faqData","getAllFAQs","faqs","updateFAQById","faqId","faq","turtlInfoModel","addTurtlInfo","serviceEmail","address","contactNumber","socialMediaLinks","googleMap","undefined","objData","subsidiaryAddress","checkTurtlInfo","turtlInfoAdded","getTurtlInfo","turtlInfo","turtlSEOModel","addTurtlSEO","getAllSEO","turtlseos","updateTurtlSEOData","seoId","pageSEO","pageTitle","pageDescription","pageKeywords","pageUrl","siteName","altImageText","imageHight","imageWidth","getSEOByPageName","axios","cheerio","app","cors","use","getURLCount","domain","get","totalCount","load","$","count","userModel","secretKey","isValidMoblie","Authentication","Authorization","getUserId","getUser","addUser","mobile","role","joiningDate","isDeleted","userData","addData","loginUser","userId","Application","userInfo","authority","aurhorities","userAuthorities","includes","appData1","permissionsList","employees","createUser","headers","userType","gender","DOB","populate","getEmpDetailsWithSalary","employeesData","updateUserById","employeeId","employee","hashedPassword","deleteUserById","findOneAndUpdate","deletedAt","new","addBlogVisitors","sub","picture","visitorData","visitorAdded","v4","uuid","fs","image","folderName","path","mkdirSync","recursive","preName","mv","next","tokenWithBearer","decodedToken","verify","decode","LoginUserId","userid","config","process","env","SECRET_KEY","mongoDbUrl","MONGO_DB_URI","TOKEN_SECRET_KEY","port","PORT","firebaseApiKey","FIREBASE_API_KEY","firebaseAuthDomain","FIREBASE_AUTH_DOMAIN","firebaseProjectId","FIREBASE_PROJECT_ID","firebaseStorageBucket","FIREBASE_STORAGE_BUCKET","firebaseMessagingSenderId","FIREBASE_MESSAGING_SENDER_ID","firebaseAppId","FIREBASE_APP_ID","dotenv","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","mongoose","adminSchema","Schema","userKey","String","required","unique","min","max","timestamps","model","slugify","ObjectId","Types","blogSchema","authorId","Number","default","markdown","quoteAuthor","blogAuthor","Boolean","pre","this","lower","strict","certificateSchema","eventSchema","imageSchema","likeSchema","pageImageSchema","portfolioSchema","str","serviceCategorySchema","serviceSchema","testimonialSchema","designation","rating","turtlFAQSchema","turtlInfoSchema","types","url","city","state","country","turtlSEOSchema","userSchema","visitorSchema","router","Router","adminController","userController","blogController","serviceController","imageController","likesController","visitorsController","testimonialController","portfolioController","certificateController","turtlInfoController","eventController","pageImageController","turtlSEOController","contactUsController","turtlFAQController","serviceCategoryController","urlCountController","paymentGatewayController","firebaseImageController","post","put","delete","requestBody","Object","keys","objectId","value","test","gmail","isValidGST","GST","img","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","bodyParser","route","fileUpload","json","urlencoded","extended","static","connect","useNewUrlParser","then","console","log","catch","listen"],"sourceRoot":""}